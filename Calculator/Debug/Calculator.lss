
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000fb0  00001044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000194  0080008a  0080008a  0000106e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b49  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4f  00000000  00000000  00002d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f12  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  000047e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000789  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000167a  00000000  00000000  00005339  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000069b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 31       	cpi	r26, 0x1E	; 30
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <main>
  8a:	0c 94 d6 07 	jmp	0xfac	; 0xfac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <IsOperand>:


// Function to verify whether a character is alphanumeric letter or numeric digit.
int IsOperand(char C)
{
	if ((C >= '0' && C <= '9') || (C >= 'a' && C <= 'z') || (C >= 'A' && C <= 'Z')) {
  92:	90 ed       	ldi	r25, 0xD0	; 208
  94:	98 0f       	add	r25, r24
  96:	9a 30       	cpi	r25, 0x0A	; 10
  98:	50 f0       	brcs	.+20     	; 0xae <IsOperand+0x1c>
  9a:	9f e9       	ldi	r25, 0x9F	; 159
  9c:	98 0f       	add	r25, r24
  9e:	9a 31       	cpi	r25, 0x1A	; 26
  a0:	48 f0       	brcs	.+18     	; 0xb4 <IsOperand+0x22>
  a2:	81 54       	subi	r24, 0x41	; 65
  a4:	8a 31       	cpi	r24, 0x1A	; 26
  a6:	48 f4       	brcc	.+18     	; 0xba <IsOperand+0x28>
		return 1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret
	}
	return 0;
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
}
  be:	08 95       	ret

000000c0 <IsOperator>:

// Function to verify whether a character is operator symbol or not.
int IsOperator(char C)
{
	if (C == '+' || C == '-' || C == '*' || C == '/') {
  c0:	8b 32       	cpi	r24, 0x2B	; 43
  c2:	49 f0       	breq	.+18     	; 0xd6 <IsOperator+0x16>
  c4:	8d 32       	cpi	r24, 0x2D	; 45
  c6:	51 f0       	breq	.+20     	; 0xdc <IsOperator+0x1c>
  c8:	8a 32       	cpi	r24, 0x2A	; 42
  ca:	59 f0       	breq	.+22     	; 0xe2 <IsOperator+0x22>
  cc:	8f 32       	cpi	r24, 0x2F	; 47
  ce:	61 f4       	brne	.+24     	; 0xe8 <IsOperator+0x28>
		return 1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret
	}
	return 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
}
  ec:	08 95       	ret

000000ee <GetOperatorWeight>:

// Function to get weight of an operator. An operator with higher weight will have higher precedence.
int GetOperatorWeight(char op)
{
	int weight = -1;
	switch (op)
  ee:	8b 32       	cpi	r24, 0x2B	; 43
  f0:	71 f0       	breq	.+28     	; 0x10e <GetOperatorWeight+0x20>
  f2:	18 f4       	brcc	.+6      	; 0xfa <GetOperatorWeight+0xc>
  f4:	8a 32       	cpi	r24, 0x2A	; 42
  f6:	41 f0       	breq	.+16     	; 0x108 <GetOperatorWeight+0x1a>
  f8:	04 c0       	rjmp	.+8      	; 0x102 <GetOperatorWeight+0x14>
  fa:	8d 32       	cpi	r24, 0x2D	; 45
  fc:	41 f0       	breq	.+16     	; 0x10e <GetOperatorWeight+0x20>
  fe:	8f 32       	cpi	r24, 0x2F	; 47
 100:	19 f0       	breq	.+6      	; 0x108 <GetOperatorWeight+0x1a>
}

// Function to get weight of an operator. An operator with higher weight will have higher precedence.
int GetOperatorWeight(char op)
{
	int weight = -1;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	9f ef       	ldi	r25, 0xFF	; 255
 106:	08 95       	ret
		case '-':
		weight = 1;
		break;
		case '*':
		case '/':
		weight = 2;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
		break;
 10c:	08 95       	ret
	int weight = -1;
	switch (op)
	{
		case '+':
		case '-':
		weight = 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
		case '/':
		weight = 2;
		break;
	}
	return weight;
}
 112:	08 95       	ret

00000114 <HasHigherPrecedence>:

// Function to perform an operation and return output.
int HasHigherPrecedence(char op1, char op2)
{
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	16 2f       	mov	r17, r22
	int op1Weight = GetOperatorWeight(op1);
 11c:	0e 94 77 00 	call	0xee	; 0xee <GetOperatorWeight>
 120:	ec 01       	movw	r28, r24
	int op2Weight = GetOperatorWeight(op2);
 122:	81 2f       	mov	r24, r17
 124:	0e 94 77 00 	call	0xee	; 0xee <GetOperatorWeight>

	return op1Weight >= op2Weight ? true : false;
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	c8 17       	cp	r28, r24
 12c:	d9 07       	cpc	r29, r25
 12e:	0c f4       	brge	.+2      	; 0x132 <HasHigherPrecedence+0x1e>
 130:	20 e0       	ldi	r18, 0x00	; 0
}
 132:	82 2f       	mov	r24, r18
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	08 95       	ret

0000013e <InfixToPostfix>:
void evaluate(char *postfix);


// Function to evaluate Postfix expression and return output
char* InfixToPostfix(const char* expression)
{
 13e:	2f 92       	push	r2
 140:	3f 92       	push	r3
 142:	4f 92       	push	r4
 144:	5f 92       	push	r5
 146:	6f 92       	push	r6
 148:	7f 92       	push	r7
 14a:	8f 92       	push	r8
 14c:	9f 92       	push	r9
 14e:	af 92       	push	r10
 150:	bf 92       	push	r11
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	c4 56       	subi	r28, 0x64	; 100
 168:	d1 09       	sbc	r29, r1
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
 174:	3c 01       	movw	r6, r24
	char* postfix = malloc(MAX_LENGTH * sizeof(char));
 176:	84 e6       	ldi	r24, 0x64	; 100
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <malloc>
 17e:	6c 01       	movw	r12, r24
	int len = strlen(expression);
 180:	f3 01       	movw	r30, r6
 182:	01 90       	ld	r0, Z+
 184:	00 20       	and	r0, r0
 186:	e9 f7       	brne	.-6      	; 0x182 <InfixToPostfix+0x44>
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	2f 01       	movw	r4, r30
 18c:	46 18       	sub	r4, r6
 18e:	57 08       	sbc	r5, r7
	// Stack to store operators
	char stack[MAX_LENGTH];
	int top = -1;
	u8 inDigit = 1;

	for (int i = 0; i < len; i++) 
 190:	81 2c       	mov	r8, r1
 192:	91 2c       	mov	r9, r1
	int x = 0;

	// Stack to store operators
	char stack[MAX_LENGTH];
	int top = -1;
	u8 inDigit = 1;
 194:	22 24       	eor	r2, r2
 196:	23 94       	inc	r2
	int len = strlen(expression);
	int x = 0;

	// Stack to store operators
	char stack[MAX_LENGTH];
	int top = -1;
 198:	ee 24       	eor	r14, r14
 19a:	ea 94       	dec	r14
 19c:	fe 2c       	mov	r15, r14
// Function to evaluate Postfix expression and return output
char* InfixToPostfix(const char* expression)
{
	char* postfix = malloc(MAX_LENGTH * sizeof(char));
	int len = strlen(expression);
	int x = 0;
 19e:	00 e0       	ldi	r16, 0x00	; 0
 1a0:	10 e0       	ldi	r17, 0x00	; 0
	// Stack to store operators
	char stack[MAX_LENGTH];
	int top = -1;
	u8 inDigit = 1;

	for (int i = 0; i < len; i++) 
 1a2:	53 c0       	rjmp	.+166    	; 0x24a <InfixToPostfix+0x10c>
	{
// 		if (expression[i] == ' ')
// 		{
// 			postfix[x++] =' ';
// 		}
		 if (IsOperator(expression[i])) 
 1a4:	53 01       	movw	r10, r6
 1a6:	a8 0c       	add	r10, r8
 1a8:	b9 1c       	adc	r11, r9
 1aa:	f5 01       	movw	r30, r10
 1ac:	30 80       	ld	r3, Z
 1ae:	83 2d       	mov	r24, r3
 1b0:	0e 94 60 00 	call	0xc0	; 0xc0 <IsOperator>
 1b4:	89 2b       	or	r24, r25
 1b6:	81 f4       	brne	.+32     	; 0x1d8 <InfixToPostfix+0x9a>
 1b8:	2f c0       	rjmp	.+94     	; 0x218 <InfixToPostfix+0xda>
		{
			inDigit = 0;
			while (top != -1  && HasHigherPrecedence(stack[top], expression[i])) 
			{
				postfix[x++] = ' ';
 1ba:	f6 01       	movw	r30, r12
 1bc:	e0 0f       	add	r30, r16
 1be:	f1 1f       	adc	r31, r17
 1c0:	80 e2       	ldi	r24, 0x20	; 32
 1c2:	80 83       	st	Z, r24
				postfix[x++] = stack[top--];
 1c4:	f8 01       	movw	r30, r16
 1c6:	31 96       	adiw	r30, 0x01	; 1
 1c8:	ec 0d       	add	r30, r12
 1ca:	fd 1d       	adc	r31, r13
 1cc:	0e 5f       	subi	r16, 0xFE	; 254
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	e8 1a       	sub	r14, r24
 1d4:	f1 08       	sbc	r15, r1
 1d6:	30 82       	st	Z, r3
// 			postfix[x++] =' ';
// 		}
		 if (IsOperator(expression[i])) 
		{
			inDigit = 0;
			while (top != -1  && HasHigherPrecedence(stack[top], expression[i])) 
 1d8:	9f ef       	ldi	r25, 0xFF	; 255
 1da:	e9 16       	cp	r14, r25
 1dc:	f9 06       	cpc	r15, r25
 1de:	71 f0       	breq	.+28     	; 0x1fc <InfixToPostfix+0xbe>
 1e0:	e1 e0       	ldi	r30, 0x01	; 1
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	ee 0d       	add	r30, r14
 1ea:	ff 1d       	adc	r31, r15
 1ec:	30 80       	ld	r3, Z
 1ee:	f5 01       	movw	r30, r10
 1f0:	60 81       	ld	r22, Z
 1f2:	83 2d       	mov	r24, r3
 1f4:	0e 94 8a 00 	call	0x114	; 0x114 <HasHigherPrecedence>
 1f8:	89 2b       	or	r24, r25
 1fa:	f9 f6       	brne	.-66     	; 0x1ba <InfixToPostfix+0x7c>
			{
				postfix[x++] = ' ';
				postfix[x++] = stack[top--];
			}
			stack[++top] = expression[i];
 1fc:	ff ef       	ldi	r31, 0xFF	; 255
 1fe:	ef 1a       	sub	r14, r31
 200:	ff 0a       	sbc	r15, r31
 202:	f5 01       	movw	r30, r10
 204:	80 81       	ld	r24, Z
 206:	e1 e0       	ldi	r30, 0x01	; 1
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ec 0f       	add	r30, r28
 20c:	fd 1f       	adc	r31, r29
 20e:	ee 0d       	add	r30, r14
 210:	ff 1d       	adc	r31, r15
 212:	80 83       	st	Z, r24
// 		{
// 			postfix[x++] =' ';
// 		}
		 if (IsOperator(expression[i])) 
		{
			inDigit = 0;
 214:	21 2c       	mov	r2, r1
 216:	0d c0       	rjmp	.+26     	; 0x232 <InfixToPostfix+0xf4>
				postfix[x++] = stack[top--];
			}
			stack[++top] = expression[i];
		}
		
		else if (IsOperand(expression[i])) 
 218:	83 2d       	mov	r24, r3
 21a:	0e 94 49 00 	call	0x92	; 0x92 <IsOperand>
 21e:	89 2b       	or	r24, r25
 220:	41 f0       	breq	.+16     	; 0x232 <InfixToPostfix+0xf4>
		{
			inDigit = 1;
			postfix[x++] = expression[i];
 222:	f6 01       	movw	r30, r12
 224:	e0 0f       	add	r30, r16
 226:	f1 1f       	adc	r31, r17
 228:	30 82       	st	Z, r3
 22a:	0f 5f       	subi	r16, 0xFF	; 255
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
			stack[++top] = expression[i];
		}
		
		else if (IsOperand(expression[i])) 
		{
			inDigit = 1;
 22e:	22 24       	eor	r2, r2
 230:	23 94       	inc	r2
			postfix[x++] = expression[i];
		}
		if(inDigit==0)
 232:	21 10       	cpse	r2, r1
 234:	07 c0       	rjmp	.+14     	; 0x244 <InfixToPostfix+0x106>
		{
			postfix[x++] = ' ';
 236:	f6 01       	movw	r30, r12
 238:	e0 0f       	add	r30, r16
 23a:	f1 1f       	adc	r31, r17
 23c:	80 e2       	ldi	r24, 0x20	; 32
 23e:	80 83       	st	Z, r24
 240:	0f 5f       	subi	r16, 0xFF	; 255
 242:	1f 4f       	sbci	r17, 0xFF	; 255
	// Stack to store operators
	char stack[MAX_LENGTH];
	int top = -1;
	u8 inDigit = 1;

	for (int i = 0; i < len; i++) 
 244:	ff ef       	ldi	r31, 0xFF	; 255
 246:	8f 1a       	sub	r8, r31
 248:	9f 0a       	sbc	r9, r31
 24a:	84 14       	cp	r8, r4
 24c:	95 04       	cpc	r9, r5
 24e:	0c f4       	brge	.+2      	; 0x252 <InfixToPostfix+0x114>
 250:	a9 cf       	rjmp	.-174    	; 0x1a4 <InfixToPostfix+0x66>
 252:	16 c0       	rjmp	.+44     	; 0x280 <InfixToPostfix+0x142>
			postfix[x++] = ' ';
		}
	}

	while (top != -1) {
		postfix[x++] = ' ';
 254:	f6 01       	movw	r30, r12
 256:	e0 0f       	add	r30, r16
 258:	f1 1f       	adc	r31, r17
 25a:	80 e2       	ldi	r24, 0x20	; 32
 25c:	80 83       	st	Z, r24
		postfix[x++] = stack[top--];
 25e:	f8 01       	movw	r30, r16
 260:	31 96       	adiw	r30, 0x01	; 1
 262:	ec 0d       	add	r30, r12
 264:	fd 1d       	adc	r31, r13
 266:	0e 5f       	subi	r16, 0xFE	; 254
 268:	1f 4f       	sbci	r17, 0xFF	; 255
 26a:	a1 e0       	ldi	r26, 0x01	; 1
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	ac 0f       	add	r26, r28
 270:	bd 1f       	adc	r27, r29
 272:	ae 0d       	add	r26, r14
 274:	bf 1d       	adc	r27, r15
 276:	8c 91       	ld	r24, X
 278:	80 83       	st	Z, r24
 27a:	c7 01       	movw	r24, r14
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	7c 01       	movw	r14, r24
		{
			postfix[x++] = ' ';
		}
	}

	while (top != -1) {
 280:	9f ef       	ldi	r25, 0xFF	; 255
 282:	e9 16       	cp	r14, r25
 284:	f9 06       	cpc	r15, r25
 286:	31 f7       	brne	.-52     	; 0x254 <InfixToPostfix+0x116>
		postfix[x++] = ' ';
		postfix[x++] = stack[top--];
	}

	postfix[x] = '\0'; // Add null terminator to the postfix expression
 288:	f6 01       	movw	r30, r12
 28a:	e0 0f       	add	r30, r16
 28c:	f1 1f       	adc	r31, r17
 28e:	10 82       	st	Z, r1
	return postfix;
	//stack +
	//postfix 20 10 +
	//20+10
	
}
 290:	c6 01       	movw	r24, r12
 292:	cc 59       	subi	r28, 0x9C	; 156
 294:	df 4f       	sbci	r29, 0xFF	; 255
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	df 90       	pop	r13
 2ae:	cf 90       	pop	r12
 2b0:	bf 90       	pop	r11
 2b2:	af 90       	pop	r10
 2b4:	9f 90       	pop	r9
 2b6:	8f 90       	pop	r8
 2b8:	7f 90       	pop	r7
 2ba:	6f 90       	pop	r6
 2bc:	5f 90       	pop	r5
 2be:	4f 90       	pop	r4
 2c0:	3f 90       	pop	r3
 2c2:	2f 90       	pop	r2
 2c4:	08 95       	ret

000002c6 <performOperation>:
}



int performOperation(int op1, int op2, char op)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <performOperation+0x6>
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	9c 01       	movw	r18, r24
	volatile	int ans;
	switch (op) {
 2d2:	4b 32       	cpi	r20, 0x2B	; 43
 2d4:	49 f0       	breq	.+18     	; 0x2e8 <performOperation+0x22>
 2d6:	18 f4       	brcc	.+6      	; 0x2de <performOperation+0x18>
 2d8:	4a 32       	cpi	r20, 0x2A	; 42
 2da:	89 f0       	breq	.+34     	; 0x2fe <performOperation+0x38>
 2dc:	20 c0       	rjmp	.+64     	; 0x31e <performOperation+0x58>
 2de:	4d 32       	cpi	r20, 0x2D	; 45
 2e0:	41 f0       	breq	.+16     	; 0x2f2 <performOperation+0x2c>
 2e2:	4f 32       	cpi	r20, 0x2F	; 47
 2e4:	b1 f0       	breq	.+44     	; 0x312 <performOperation+0x4c>
 2e6:	1b c0       	rjmp	.+54     	; 0x31e <performOperation+0x58>
		case '+':
		ans = op2 + op1;
 2e8:	26 0f       	add	r18, r22
 2ea:	37 1f       	adc	r19, r23
 2ec:	3a 83       	std	Y+2, r19	; 0x02
 2ee:	29 83       	std	Y+1, r18	; 0x01
		break;
 2f0:	16 c0       	rjmp	.+44     	; 0x31e <performOperation+0x58>
		case '-':
		ans = op2 - op1;
 2f2:	cb 01       	movw	r24, r22
 2f4:	82 1b       	sub	r24, r18
 2f6:	93 0b       	sbc	r25, r19
 2f8:	9a 83       	std	Y+2, r25	; 0x02
 2fa:	89 83       	std	Y+1, r24	; 0x01
		break;
 2fc:	10 c0       	rjmp	.+32     	; 0x31e <performOperation+0x58>
		case '*':
		ans = op2 * op1;
 2fe:	62 9f       	mul	r22, r18
 300:	c0 01       	movw	r24, r0
 302:	63 9f       	mul	r22, r19
 304:	90 0d       	add	r25, r0
 306:	72 9f       	mul	r23, r18
 308:	90 0d       	add	r25, r0
 30a:	11 24       	eor	r1, r1
 30c:	9a 83       	std	Y+2, r25	; 0x02
 30e:	89 83       	std	Y+1, r24	; 0x01
		break;
 310:	06 c0       	rjmp	.+12     	; 0x31e <performOperation+0x58>
		case '/':
		ans = op2 / op1;
 312:	cb 01       	movw	r24, r22
 314:	b9 01       	movw	r22, r18
 316:	0e 94 45 06 	call	0xc8a	; 0xc8a <__divmodhi4>
 31a:	7a 83       	std	Y+2, r23	; 0x02
 31c:	69 83       	std	Y+1, r22	; 0x01
		break;
	}
	return ans;
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	9a 81       	ldd	r25, Y+2	; 0x02
}
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <push>:
	}
	free(postfix);
}

void push(s32 c)
{
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17

	if (top == MAX_LENGTH - 1)
 330:	00 91 66 00 	lds	r16, 0x0066	; 0x800066 <top>
 334:	10 91 67 00 	lds	r17, 0x0067	; 0x800067 <top+0x1>
 338:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <top+0x2>
 33c:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <top+0x3>
 340:	03 36       	cpi	r16, 0x63	; 99
 342:	11 05       	cpc	r17, r1
 344:	21 05       	cpc	r18, r1
 346:	31 05       	cpc	r19, r1
 348:	c1 f0       	breq	.+48     	; 0x37a <push+0x4e>
	{
		
	}
	else
	{
		top++;
 34a:	0f 5f       	subi	r16, 0xFF	; 255
 34c:	1f 4f       	sbci	r17, 0xFF	; 255
 34e:	2f 4f       	sbci	r18, 0xFF	; 255
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	00 93 66 00 	sts	0x0066, r16	; 0x800066 <top>
 356:	10 93 67 00 	sts	0x0067, r17	; 0x800067 <top+0x1>
 35a:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <top+0x2>
 35e:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <top+0x3>
		inp_array[top] = c;
 362:	98 01       	movw	r18, r16
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	22 0f       	add	r18, r18
 36a:	33 1f       	adc	r19, r19
 36c:	f9 01       	movw	r30, r18
 36e:	e6 57       	subi	r30, 0x76	; 118
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	60 83       	st	Z, r22
 374:	71 83       	std	Z+1, r23	; 0x01
 376:	82 83       	std	Z+2, r24	; 0x02
 378:	93 83       	std	Z+3, r25	; 0x03
	}
}
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <pop>:

void pop()
{
	if (top == -1)
 380:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <top>
 384:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <top+0x1>
 388:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <top+0x2>
 38c:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <top+0x3>
 390:	8f 3f       	cpi	r24, 0xFF	; 255
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	92 07       	cpc	r25, r18
 396:	a2 07       	cpc	r26, r18
 398:	b2 07       	cpc	r27, r18
 39a:	59 f0       	breq	.+22     	; 0x3b2 <pop+0x32>
	{
		
	}
	else
	{
		top --;
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	a1 09       	sbc	r26, r1
 3a0:	b1 09       	sbc	r27, r1
 3a2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <top>
 3a6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <top+0x1>
 3aa:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <top+0x2>
 3ae:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <top+0x3>
 3b2:	08 95       	ret

000003b4 <getTop>:
	}
}

s32 getTop(){
	
	if (top == -1)
 3b4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <top>
 3b8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <top+0x1>
 3bc:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <top+0x2>
 3c0:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <top+0x3>
 3c4:	8f 3f       	cpi	r24, 0xFF	; 255
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	92 07       	cpc	r25, r18
 3ca:	a2 07       	cpc	r26, r18
 3cc:	b2 07       	cpc	r27, r18
 3ce:	61 f0       	breq	.+24     	; 0x3e8 <getTop+0x34>
	{
		
	}
	else
	{
		return inp_array[top];
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	fc 01       	movw	r30, r24
 3da:	e6 57       	subi	r30, 0x76	; 118
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	60 81       	ld	r22, Z
 3e0:	71 81       	ldd	r23, Z+1	; 0x01
 3e2:	82 81       	ldd	r24, Z+2	; 0x02
 3e4:	93 81       	ldd	r25, Z+3	; 0x03
 3e6:	08 95       	ret
	}
}
 3e8:	08 95       	ret

000003ea <evaluate>:
}


// Function to evaluate Postfix expression and return output    20 10 +
void evaluate(char* expression)
{
 3ea:	2f 92       	push	r2
 3ec:	3f 92       	push	r3
 3ee:	6f 92       	push	r6
 3f0:	7f 92       	push	r7
 3f2:	8f 92       	push	r8
 3f4:	9f 92       	push	r9
 3f6:	af 92       	push	r10
 3f8:	bf 92       	push	r11
 3fa:	cf 92       	push	r12
 3fc:	df 92       	push	r13
 3fe:	ef 92       	push	r14
 400:	ff 92       	push	r15
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	63 97       	sbiw	r28, 0x13	; 19
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
	char* postfix = InfixToPostfix(expression);
 41a:	0e 94 9f 00 	call	0x13e	; 0x13e <InfixToPostfix>
 41e:	6c 01       	movw	r12, r24
	u8 buffer[15];
	u16 i, op1, op2, len, j, x,error=0;
	len = strlen(postfix);
 420:	fc 01       	movw	r30, r24
 422:	01 90       	ld	r0, Z+
 424:	00 20       	and	r0, r0
 426:	e9 f7       	brne	.-6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	1f 01       	movw	r2, r30
 42c:	28 1a       	sub	r2, r24
 42e:	39 0a       	sbc	r3, r25
	j = 0;
 430:	a1 2c       	mov	r10, r1
 432:	b1 2c       	mov	r11, r1

	for (i = 0; i < len; i++) 
 434:	00 e0       	ldi	r16, 0x00	; 0
 436:	10 e0       	ldi	r17, 0x00	; 0
 438:	54 c0       	rjmp	.+168    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
	{

		if (postfix[i] >= '0' && postfix[i] <= '9') {
 43a:	76 01       	movw	r14, r12
 43c:	e0 0e       	add	r14, r16
 43e:	f1 1e       	adc	r15, r17
 440:	f7 01       	movw	r30, r14
 442:	80 81       	ld	r24, Z
 444:	90 ed       	ldi	r25, 0xD0	; 208
 446:	98 0f       	add	r25, r24
 448:	9a 30       	cpi	r25, 0x0A	; 10
 44a:	58 f4       	brcc	.+22     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			buffer[j++] = postfix[i];
 44c:	e1 e0       	ldi	r30, 0x01	; 1
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	ec 0f       	add	r30, r28
 452:	fd 1f       	adc	r31, r29
 454:	ea 0d       	add	r30, r10
 456:	fb 1d       	adc	r31, r11
 458:	80 83       	st	Z, r24
 45a:	c5 01       	movw	r24, r10
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	5c 01       	movw	r10, r24
 460:	3e c0       	rjmp	.+124    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
			//push(postfix[i]-'0');
		}
		else if (postfix[i] == ' ') {
 462:	80 32       	cpi	r24, 0x20	; 32
 464:	b1 f4       	brne	.+44     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
			if (j > 0) {
 466:	a1 14       	cp	r10, r1
 468:	b1 04       	cpc	r11, r1
 46a:	c9 f1       	breq	.+114    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
				buffer[j] = '\0';
 46c:	e1 e0       	ldi	r30, 0x01	; 1
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	ec 0f       	add	r30, r28
 472:	fd 1f       	adc	r31, r29
 474:	ea 0d       	add	r30, r10
 476:	fb 1d       	adc	r31, r11
 478:	10 82       	st	Z, r1
				x = atoi(buffer);
 47a:	ce 01       	movw	r24, r28
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	0e 94 b0 07 	call	0xf60	; 0xf60 <atoi>
				push(x);
 482:	bc 01       	movw	r22, r24
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 96 01 	call	0x32c	; 0x32c <push>
				j = 0;
 48c:	a1 2c       	mov	r10, r1
 48e:	b1 2c       	mov	r11, r1
 490:	26 c0       	rjmp	.+76     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
			}
		}
		else if (IsOperator(postfix[i])) {
 492:	0e 94 60 00 	call	0xc0	; 0xc0 <IsOperator>
 496:	89 2b       	or	r24, r25
 498:	11 f1       	breq	.+68     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
			j = 0;
			op1 = getTop();
 49a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <getTop>
 49e:	4b 01       	movw	r8, r22
 4a0:	5c 01       	movw	r10, r24
			pop();
 4a2:	0e 94 c0 01 	call	0x380	; 0x380 <pop>
			op2 = getTop();
 4a6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <getTop>
 4aa:	68 8b       	std	Y+16, r22	; 0x10
 4ac:	79 8b       	std	Y+17, r23	; 0x11
 4ae:	8a 8b       	std	Y+18, r24	; 0x12
 4b0:	9b 8b       	std	Y+19, r25	; 0x13
			pop();
 4b2:	0e 94 c0 01 	call	0x380	; 0x380 <pop>
			if(postfix[i]=='/' && op1==0)
 4b6:	f7 01       	movw	r30, r14
 4b8:	40 81       	ld	r20, Z
 4ba:	4f 32       	cpi	r20, 0x2F	; 47
 4bc:	19 f4       	brne	.+6      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4be:	81 14       	cp	r8, r1
 4c0:	91 04       	cpc	r9, r1
 4c2:	b1 f0       	breq	.+44     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
			{
				error=1;
				break;
			}
			push(performOperation(op1, op2, postfix[i]));
 4c4:	68 89       	ldd	r22, Y+16	; 0x10
 4c6:	79 89       	ldd	r23, Y+17	; 0x11
 4c8:	c4 01       	movw	r24, r8
 4ca:	0e 94 63 01 	call	0x2c6	; 0x2c6 <performOperation>
 4ce:	bc 01       	movw	r22, r24
 4d0:	99 0f       	add	r25, r25
 4d2:	88 0b       	sbc	r24, r24
 4d4:	99 0b       	sbc	r25, r25
 4d6:	0e 94 96 01 	call	0x32c	; 0x32c <push>
				push(x);
				j = 0;
			}
		}
		else if (IsOperator(postfix[i])) {
			j = 0;
 4da:	a1 2c       	mov	r10, r1
 4dc:	b1 2c       	mov	r11, r1
	u8 buffer[15];
	u16 i, op1, op2, len, j, x,error=0;
	len = strlen(postfix);
	j = 0;

	for (i = 0; i < len; i++) 
 4de:	0f 5f       	subi	r16, 0xFF	; 255
 4e0:	1f 4f       	sbci	r17, 0xFF	; 255
 4e2:	02 15       	cp	r16, r2
 4e4:	13 05       	cpc	r17, r3
 4e6:	08 f4       	brcc	.+2      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4e8:	a8 cf       	rjmp	.-176    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
// Function to evaluate Postfix expression and return output    20 10 +
void evaluate(char* expression)
{
	char* postfix = InfixToPostfix(expression);
	u8 buffer[15];
	u16 i, op1, op2, len, j, x,error=0;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
			pop();
			op2 = getTop();
			pop();
			if(postfix[i]=='/' && op1==0)
			{
				error=1;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
				break;
			}
			push(performOperation(op1, op2, postfix[i]));
		}
	}
	if (error)
 4f4:	89 2b       	or	r24, r25
 4f6:	59 f0       	breq	.+22     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
	{
		LCD_u8SetPosXY(1,0);
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_u8SetPosXY>
		LCD_u8SendString("ERROR!");
 504:	8a e7       	ldi	r24, 0x7A	; 122
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 6f 05 	call	0xade	; 0xade <LCD_u8SendString>
 50c:	0a c0       	rjmp	.+20     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
	}
	else 
	{
		LCD_u8SetPosXY(1,0);
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_u8SetPosXY>
		LCD_voidWriteNumber(getTop());
 51a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <getTop>
 51e:	0e 94 94 05 	call	0xb28	; 0xb28 <LCD_voidWriteNumber>
	}
	free(postfix);
 522:	c6 01       	movw	r24, r12
 524:	0e 94 27 07 	call	0xe4e	; 0xe4e <free>
}
 528:	63 96       	adiw	r28, 0x13	; 19
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	bf 90       	pop	r11
 546:	af 90       	pop	r10
 548:	9f 90       	pop	r9
 54a:	8f 90       	pop	r8
 54c:	7f 90       	pop	r7
 54e:	6f 90       	pop	r6
 550:	3f 90       	pop	r3
 552:	2f 90       	pop	r2
 554:	08 95       	ret

00000556 <DIO_u8SetPinDirection>:
	
	return Local_u8ErrorState;

	
	
}
 556:	68 30       	cpi	r22, 0x08	; 8
 558:	08 f0       	brcs	.+2      	; 0x55c <DIO_u8SetPinDirection+0x6>
 55a:	78 c0       	rjmp	.+240    	; 0x64c <DIO_u8SetPinDirection+0xf6>
 55c:	41 30       	cpi	r20, 0x01	; 1
 55e:	c1 f5       	brne	.+112    	; 0x5d0 <DIO_u8SetPinDirection+0x7a>
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	91 f0       	breq	.+36     	; 0x588 <DIO_u8SetPinDirection+0x32>
 564:	28 f0       	brcs	.+10     	; 0x570 <DIO_u8SetPinDirection+0x1a>
 566:	82 30       	cpi	r24, 0x02	; 2
 568:	d9 f0       	breq	.+54     	; 0x5a0 <DIO_u8SetPinDirection+0x4a>
 56a:	83 30       	cpi	r24, 0x03	; 3
 56c:	29 f1       	breq	.+74     	; 0x5b8 <DIO_u8SetPinDirection+0x62>
 56e:	70 c0       	rjmp	.+224    	; 0x650 <DIO_u8SetPinDirection+0xfa>
 570:	2a b3       	in	r18, 0x1a	; 26
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_u8SetPinDirection+0x26>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_u8SetPinDirection+0x22>
 580:	82 2b       	or	r24, r18
 582:	8a bb       	out	0x1a, r24	; 26
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	08 95       	ret
 588:	27 b3       	in	r18, 0x17	; 23
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_u8SetPinDirection+0x3e>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_u8SetPinDirection+0x3a>
 598:	82 2b       	or	r24, r18
 59a:	87 bb       	out	0x17, r24	; 23
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	08 95       	ret
 5a0:	24 b3       	in	r18, 0x14	; 20
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_u8SetPinDirection+0x56>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_u8SetPinDirection+0x52>
 5b0:	82 2b       	or	r24, r18
 5b2:	84 bb       	out	0x14, r24	; 20
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
 5b8:	21 b3       	in	r18, 0x11	; 17
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_u8SetPinDirection+0x6e>
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	6a 95       	dec	r22
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_u8SetPinDirection+0x6a>
 5c8:	82 2b       	or	r24, r18
 5ca:	81 bb       	out	0x11, r24	; 17
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret
 5d0:	41 11       	cpse	r20, r1
 5d2:	40 c0       	rjmp	.+128    	; 0x654 <DIO_u8SetPinDirection+0xfe>
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	99 f0       	breq	.+38     	; 0x5fe <DIO_u8SetPinDirection+0xa8>
 5d8:	28 f0       	brcs	.+10     	; 0x5e4 <DIO_u8SetPinDirection+0x8e>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	e9 f0       	breq	.+58     	; 0x618 <DIO_u8SetPinDirection+0xc2>
 5de:	83 30       	cpi	r24, 0x03	; 3
 5e0:	41 f1       	breq	.+80     	; 0x632 <DIO_u8SetPinDirection+0xdc>
 5e2:	3a c0       	rjmp	.+116    	; 0x658 <DIO_u8SetPinDirection+0x102>
 5e4:	2a b3       	in	r18, 0x1a	; 26
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_u8SetPinDirection+0x9a>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_u8SetPinDirection+0x96>
 5f4:	80 95       	com	r24
 5f6:	82 23       	and	r24, r18
 5f8:	8a bb       	out	0x1a, r24	; 26
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret
 5fe:	27 b3       	in	r18, 0x17	; 23
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_u8SetPinDirection+0xb4>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_u8SetPinDirection+0xb0>
 60e:	80 95       	com	r24
 610:	82 23       	and	r24, r18
 612:	87 bb       	out	0x17, r24	; 23
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	08 95       	ret
 618:	24 b3       	in	r18, 0x14	; 20
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_u8SetPinDirection+0xce>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_u8SetPinDirection+0xca>
 628:	80 95       	com	r24
 62a:	82 23       	and	r24, r18
 62c:	84 bb       	out	0x14, r24	; 20
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	08 95       	ret
 632:	21 b3       	in	r18, 0x11	; 17
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_u8SetPinDirection+0xe8>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_u8SetPinDirection+0xe4>
 642:	80 95       	com	r24
 644:	82 23       	and	r24, r18
 646:	81 bb       	out	0x11, r24	; 17
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	08 95       	ret
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	08 95       	ret
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	08 95       	ret
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	08 95       	ret
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	08 95       	ret

0000065c <DIO_u8SetPinValue>:
 65c:	68 30       	cpi	r22, 0x08	; 8
 65e:	08 f0       	brcs	.+2      	; 0x662 <DIO_u8SetPinValue+0x6>
 660:	78 c0       	rjmp	.+240    	; 0x752 <DIO_u8SetPinValue+0xf6>
 662:	41 30       	cpi	r20, 0x01	; 1
 664:	c1 f5       	brne	.+112    	; 0x6d6 <DIO_u8SetPinValue+0x7a>
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	91 f0       	breq	.+36     	; 0x68e <DIO_u8SetPinValue+0x32>
 66a:	28 f0       	brcs	.+10     	; 0x676 <DIO_u8SetPinValue+0x1a>
 66c:	82 30       	cpi	r24, 0x02	; 2
 66e:	d9 f0       	breq	.+54     	; 0x6a6 <DIO_u8SetPinValue+0x4a>
 670:	83 30       	cpi	r24, 0x03	; 3
 672:	29 f1       	breq	.+74     	; 0x6be <DIO_u8SetPinValue+0x62>
 674:	70 c0       	rjmp	.+224    	; 0x756 <DIO_u8SetPinValue+0xfa>
 676:	2b b3       	in	r18, 0x1b	; 27
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_u8SetPinValue+0x26>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	6a 95       	dec	r22
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_u8SetPinValue+0x22>
 686:	82 2b       	or	r24, r18
 688:	8b bb       	out	0x1b, r24	; 27
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	08 95       	ret
 68e:	28 b3       	in	r18, 0x18	; 24
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_u8SetPinValue+0x3e>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	6a 95       	dec	r22
 69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_u8SetPinValue+0x3a>
 69e:	82 2b       	or	r24, r18
 6a0:	88 bb       	out	0x18, r24	; 24
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	08 95       	ret
 6a6:	25 b3       	in	r18, 0x15	; 21
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_u8SetPinValue+0x56>
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	6a 95       	dec	r22
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_u8SetPinValue+0x52>
 6b6:	82 2b       	or	r24, r18
 6b8:	85 bb       	out	0x15, r24	; 21
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	08 95       	ret
 6be:	22 b3       	in	r18, 0x12	; 18
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_u8SetPinValue+0x6e>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_u8SetPinValue+0x6a>
 6ce:	82 2b       	or	r24, r18
 6d0:	82 bb       	out	0x12, r24	; 18
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	08 95       	ret
 6d6:	41 11       	cpse	r20, r1
 6d8:	40 c0       	rjmp	.+128    	; 0x75a <DIO_u8SetPinValue+0xfe>
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	99 f0       	breq	.+38     	; 0x704 <DIO_u8SetPinValue+0xa8>
 6de:	28 f0       	brcs	.+10     	; 0x6ea <DIO_u8SetPinValue+0x8e>
 6e0:	82 30       	cpi	r24, 0x02	; 2
 6e2:	e9 f0       	breq	.+58     	; 0x71e <DIO_u8SetPinValue+0xc2>
 6e4:	83 30       	cpi	r24, 0x03	; 3
 6e6:	41 f1       	breq	.+80     	; 0x738 <DIO_u8SetPinValue+0xdc>
 6e8:	3a c0       	rjmp	.+116    	; 0x75e <DIO_u8SetPinValue+0x102>
 6ea:	2b b3       	in	r18, 0x1b	; 27
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_u8SetPinValue+0x9a>
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	6a 95       	dec	r22
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_u8SetPinValue+0x96>
 6fa:	80 95       	com	r24
 6fc:	82 23       	and	r24, r18
 6fe:	8b bb       	out	0x1b, r24	; 27
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	08 95       	ret
 704:	28 b3       	in	r18, 0x18	; 24
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_u8SetPinValue+0xb4>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	6a 95       	dec	r22
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_u8SetPinValue+0xb0>
 714:	80 95       	com	r24
 716:	82 23       	and	r24, r18
 718:	88 bb       	out	0x18, r24	; 24
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	08 95       	ret
 71e:	25 b3       	in	r18, 0x15	; 21
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_u8SetPinValue+0xce>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	6a 95       	dec	r22
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_u8SetPinValue+0xca>
 72e:	80 95       	com	r24
 730:	82 23       	and	r24, r18
 732:	85 bb       	out	0x15, r24	; 21
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	08 95       	ret
 738:	22 b3       	in	r18, 0x12	; 18
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <DIO_u8SetPinValue+0xe8>
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	6a 95       	dec	r22
 746:	e2 f7       	brpl	.-8      	; 0x740 <DIO_u8SetPinValue+0xe4>
 748:	80 95       	com	r24
 74a:	82 23       	and	r24, r18
 74c:	82 bb       	out	0x12, r24	; 18
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	08 95       	ret
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	08 95       	ret
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	08 95       	ret
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	08 95       	ret
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	08 95       	ret

00000762 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 *copy_pu8ReturnPinValue)
{
	
	u8 Local_u8ErrorState = OK ;

	if(copy_u8PinNumber >= DIO_PIN0 && copy_u8PinNumber<= DIO_PIN7 )
 762:	68 30       	cpi	r22, 0x08	; 8
 764:	c0 f5       	brcc	.+112    	; 0x7d6 <DIO_u8GetPinValue+0x74>
	{
		switch(copy_u8Port)
 766:	81 30       	cpi	r24, 0x01	; 1
 768:	91 f0       	breq	.+36     	; 0x78e <DIO_u8GetPinValue+0x2c>
 76a:	28 f0       	brcs	.+10     	; 0x776 <DIO_u8GetPinValue+0x14>
 76c:	82 30       	cpi	r24, 0x02	; 2
 76e:	d9 f0       	breq	.+54     	; 0x7a6 <DIO_u8GetPinValue+0x44>
 770:	83 30       	cpi	r24, 0x03	; 3
 772:	29 f1       	breq	.+74     	; 0x7be <DIO_u8GetPinValue+0x5c>
 774:	32 c0       	rjmp	.+100    	; 0x7da <DIO_u8GetPinValue+0x78>
		{
			case DIO_PORTA:  *copy_pu8ReturnPinValue=GET_BIT(PINA,copy_u8PinNumber);  break;
 776:	89 b3       	in	r24, 0x19	; 25
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_u8GetPinValue+0x1e>
 77c:	95 95       	asr	r25
 77e:	87 95       	ror	r24
 780:	6a 95       	dec	r22
 782:	e2 f7       	brpl	.-8      	; 0x77c <DIO_u8GetPinValue+0x1a>
 784:	81 70       	andi	r24, 0x01	; 1
 786:	fa 01       	movw	r30, r20
 788:	80 83       	st	Z, r24
}

u8 DIO_u8GetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 *copy_pu8ReturnPinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 78a:	80 e0       	ldi	r24, 0x00	; 0

	if(copy_u8PinNumber >= DIO_PIN0 && copy_u8PinNumber<= DIO_PIN7 )
	{
		switch(copy_u8Port)
		{
			case DIO_PORTA:  *copy_pu8ReturnPinValue=GET_BIT(PINA,copy_u8PinNumber);  break;
 78c:	08 95       	ret
			case DIO_PORTB:  *copy_pu8ReturnPinValue=GET_BIT(PINB,copy_u8PinNumber);  break;
 78e:	86 b3       	in	r24, 0x16	; 22
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <DIO_u8GetPinValue+0x36>
 794:	95 95       	asr	r25
 796:	87 95       	ror	r24
 798:	6a 95       	dec	r22
 79a:	e2 f7       	brpl	.-8      	; 0x794 <DIO_u8GetPinValue+0x32>
 79c:	81 70       	andi	r24, 0x01	; 1
 79e:	fa 01       	movw	r30, r20
 7a0:	80 83       	st	Z, r24
}

u8 DIO_u8GetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 *copy_pu8ReturnPinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 7a2:	80 e0       	ldi	r24, 0x00	; 0
	if(copy_u8PinNumber >= DIO_PIN0 && copy_u8PinNumber<= DIO_PIN7 )
	{
		switch(copy_u8Port)
		{
			case DIO_PORTA:  *copy_pu8ReturnPinValue=GET_BIT(PINA,copy_u8PinNumber);  break;
			case DIO_PORTB:  *copy_pu8ReturnPinValue=GET_BIT(PINB,copy_u8PinNumber);  break;
 7a4:	08 95       	ret
			case DIO_PORTC:  *copy_pu8ReturnPinValue=GET_BIT(PINC,copy_u8PinNumber);  break;
 7a6:	83 b3       	in	r24, 0x13	; 19
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_u8GetPinValue+0x4e>
 7ac:	95 95       	asr	r25
 7ae:	87 95       	ror	r24
 7b0:	6a 95       	dec	r22
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_u8GetPinValue+0x4a>
 7b4:	81 70       	andi	r24, 0x01	; 1
 7b6:	fa 01       	movw	r30, r20
 7b8:	80 83       	st	Z, r24
}

u8 DIO_u8GetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 *copy_pu8ReturnPinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 7ba:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(copy_u8Port)
		{
			case DIO_PORTA:  *copy_pu8ReturnPinValue=GET_BIT(PINA,copy_u8PinNumber);  break;
			case DIO_PORTB:  *copy_pu8ReturnPinValue=GET_BIT(PINB,copy_u8PinNumber);  break;
			case DIO_PORTC:  *copy_pu8ReturnPinValue=GET_BIT(PINC,copy_u8PinNumber);  break;
 7bc:	08 95       	ret
			case DIO_PORTD:  *copy_pu8ReturnPinValue=GET_BIT(PIND,copy_u8PinNumber);  break;
 7be:	80 b3       	in	r24, 0x10	; 16
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_u8GetPinValue+0x66>
 7c4:	95 95       	asr	r25
 7c6:	87 95       	ror	r24
 7c8:	6a 95       	dec	r22
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_u8GetPinValue+0x62>
 7cc:	81 70       	andi	r24, 0x01	; 1
 7ce:	fa 01       	movw	r30, r20
 7d0:	80 83       	st	Z, r24
}

u8 DIO_u8GetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 *copy_pu8ReturnPinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 7d2:	80 e0       	ldi	r24, 0x00	; 0
		switch(copy_u8Port)
		{
			case DIO_PORTA:  *copy_pu8ReturnPinValue=GET_BIT(PINA,copy_u8PinNumber);  break;
			case DIO_PORTB:  *copy_pu8ReturnPinValue=GET_BIT(PINB,copy_u8PinNumber);  break;
			case DIO_PORTC:  *copy_pu8ReturnPinValue=GET_BIT(PINC,copy_u8PinNumber);  break;
			case DIO_PORTD:  *copy_pu8ReturnPinValue=GET_BIT(PIND,copy_u8PinNumber);  break;
 7d4:	08 95       	ret
			default: Local_u8ErrorState =NOK ;
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	08 95       	ret
			case DIO_PORTA:  *copy_pu8ReturnPinValue=GET_BIT(PINA,copy_u8PinNumber);  break;
			case DIO_PORTB:  *copy_pu8ReturnPinValue=GET_BIT(PINB,copy_u8PinNumber);  break;
			case DIO_PORTC:  *copy_pu8ReturnPinValue=GET_BIT(PINC,copy_u8PinNumber);  break;
			case DIO_PORTD:  *copy_pu8ReturnPinValue=GET_BIT(PIND,copy_u8PinNumber);  break;
			
			default: Local_u8ErrorState =NOK ;
 7da:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = NOK;
	}

	return Local_u8ErrorState;
}
 7dc:	08 95       	ret

000007de <KPD_voidINIT>:
#include "KPD_private.h"

void KPD_voidINIT(void)
{
	/*initial value for row high*/
	DIO_u8SetPinDirection(KPD_PORT_ROW,KPD_ROW0,DIO_PIN_INPUT);
 7de:	40 e0       	ldi	r20, 0x00	; 0
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT_ROW,KPD_ROW1,DIO_PIN_INPUT);
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	61 e0       	ldi	r22, 0x01	; 1
 7ec:	83 e0       	ldi	r24, 0x03	; 3
 7ee:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT_ROW,KPD_ROW2,DIO_PIN_INPUT);
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	62 e0       	ldi	r22, 0x02	; 2
 7f6:	83 e0       	ldi	r24, 0x03	; 3
 7f8:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT_ROW,KPD_ROW3,DIO_PIN_INPUT);
 7fc:	40 e0       	ldi	r20, 0x00	; 0
 7fe:	63 e0       	ldi	r22, 0x03	; 3
 800:	83 e0       	ldi	r24, 0x03	; 3
 802:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
	
	/*PULLUP*/
	DIO_u8SetPinValue(KPD_PORT_ROW,KPD_ROW0,DIO_PIN_HIGH);
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	83 e0       	ldi	r24, 0x03	; 3
 80c:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT_ROW,KPD_ROW1,DIO_PIN_HIGH);
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	61 e0       	ldi	r22, 0x01	; 1
 814:	83 e0       	ldi	r24, 0x03	; 3
 816:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT_ROW,KPD_ROW2,DIO_PIN_HIGH);
 81a:	41 e0       	ldi	r20, 0x01	; 1
 81c:	62 e0       	ldi	r22, 0x02	; 2
 81e:	83 e0       	ldi	r24, 0x03	; 3
 820:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT_ROW,KPD_ROW3,DIO_PIN_HIGH);
 824:	41 e0       	ldi	r20, 0x01	; 1
 826:	63 e0       	ldi	r22, 0x03	; 3
 828:	83 e0       	ldi	r24, 0x03	; 3
 82a:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
	
	DIO_u8SetPinDirection(KPD_PORT_COL,KPD_COL0,DIO_PIN_OUTPUT);
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	64 e0       	ldi	r22, 0x04	; 4
 832:	83 e0       	ldi	r24, 0x03	; 3
 834:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT_COL,KPD_COL1,DIO_PIN_OUTPUT);
 838:	41 e0       	ldi	r20, 0x01	; 1
 83a:	65 e0       	ldi	r22, 0x05	; 5
 83c:	83 e0       	ldi	r24, 0x03	; 3
 83e:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT_COL,KPD_COL2,DIO_PIN_OUTPUT);
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	66 e0       	ldi	r22, 0x06	; 6
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT_COL,KPD_COL3,DIO_PIN_OUTPUT);
 84c:	41 e0       	ldi	r20, 0x01	; 1
 84e:	67 e0       	ldi	r22, 0x07	; 7
 850:	83 e0       	ldi	r24, 0x03	; 3
 852:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
	
	DIO_u8SetPinValue(KPD_PORT_COL,KPD_COL0,DIO_PIN_HIGH);
 856:	41 e0       	ldi	r20, 0x01	; 1
 858:	64 e0       	ldi	r22, 0x04	; 4
 85a:	83 e0       	ldi	r24, 0x03	; 3
 85c:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT_COL,KPD_COL1,DIO_PIN_HIGH);
 860:	41 e0       	ldi	r20, 0x01	; 1
 862:	65 e0       	ldi	r22, 0x05	; 5
 864:	83 e0       	ldi	r24, 0x03	; 3
 866:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT_COL,KPD_COL2,DIO_PIN_HIGH);
 86a:	41 e0       	ldi	r20, 0x01	; 1
 86c:	66 e0       	ldi	r22, 0x06	; 6
 86e:	83 e0       	ldi	r24, 0x03	; 3
 870:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT_COL,KPD_COL3,DIO_PIN_HIGH);
 874:	41 e0       	ldi	r20, 0x01	; 1
 876:	67 e0       	ldi	r22, 0x07	; 7
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 87e:	08 95       	ret

00000880 <KPD_GetPressedKey>:
	
}
u8 KPD_GetPressedKey(void)
{
 880:	af 92       	push	r10
 882:	bf 92       	push	r11
 884:	cf 92       	push	r12
 886:	df 92       	push	r13
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
 898:	69 97       	sbiw	r28, 0x19	; 25
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	f8 94       	cli
 89e:	de bf       	out	0x3e, r29	; 62
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8PressedKey=0xff;
	u8 local_u8KPD_Arr[KPD_ROW_NUMBER][KPD_COL_NUMBER]=KPD_arr;
 8a4:	80 e1       	ldi	r24, 0x10	; 16
 8a6:	ea e6       	ldi	r30, 0x6A	; 106
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	de 01       	movw	r26, r28
 8ac:	11 96       	adiw	r26, 0x01	; 1
 8ae:	01 90       	ld	r0, Z+
 8b0:	0d 92       	st	X+, r0
 8b2:	8a 95       	dec	r24
 8b4:	e1 f7       	brne	.-8      	; 0x8ae <KPD_GetPressedKey+0x2e>
	u8 local_u8ROW_Arr[KPD_ROW_NUMBER]={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};
 8b6:	19 8a       	std	Y+17, r1	; 0x11
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	8a 8b       	std	Y+18, r24	; 0x12
 8bc:	92 e0       	ldi	r25, 0x02	; 2
 8be:	9b 8b       	std	Y+19, r25	; 0x13
 8c0:	93 e0       	ldi	r25, 0x03	; 3
 8c2:	9c 8b       	std	Y+20, r25	; 0x14
	u8 local_u8COL_Arr[KPD_COL_NUMBER]={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
 8c4:	94 e0       	ldi	r25, 0x04	; 4
 8c6:	9d 8b       	std	Y+21, r25	; 0x15
 8c8:	95 e0       	ldi	r25, 0x05	; 5
 8ca:	9e 8b       	std	Y+22, r25	; 0x16
 8cc:	96 e0       	ldi	r25, 0x06	; 6
 8ce:	9f 8b       	std	Y+23, r25	; 0x17
 8d0:	97 e0       	ldi	r25, 0x07	; 7
 8d2:	98 8f       	std	Y+24, r25	; 0x18
	u8 local_u8Index_col=0,local_u8Index_row=0;

	u8 local_u8RowState=DIO_PIN_HIGH;
 8d4:	89 8f       	std	Y+25, r24	; 0x19
	/*
	LOOP


	*/
	for(local_u8Index_col = 0 ; local_u8Index_col < KPD_COL_NUMBER ; local_u8Index_col++ )
 8d6:	b1 2c       	mov	r11, r1
 8d8:	46 c0       	rjmp	.+140    	; 0x966 <KPD_GetPressedKey+0xe6>
	{
		
		/*Activate column by low*/
		DIO_u8SetPinValue(KPD_PORT_COL,local_u8COL_Arr[local_u8Index_col],DIO_PIN_LOW);
 8da:	cb 2c       	mov	r12, r11
 8dc:	d1 2c       	mov	r13, r1
 8de:	e5 e1       	ldi	r30, 0x15	; 21
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	ec 0f       	add	r30, r28
 8e4:	fd 1f       	adc	r31, r29
 8e6:	ec 0d       	add	r30, r12
 8e8:	fd 1d       	adc	r31, r13
 8ea:	a0 80       	ld	r10, Z
 8ec:	40 e0       	ldi	r20, 0x00	; 0
 8ee:	6a 2d       	mov	r22, r10
 8f0:	83 e0       	ldi	r24, 0x03	; 3
 8f2:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
		
		/*check R0--->R4 IF pressed retrun pressedKey*/
		for(local_u8Index_row = 0 ; local_u8Index_row < KPD_ROW_NUMBER ; local_u8Index_row++ )
 8f6:	10 e0       	ldi	r17, 0x00	; 0
 8f8:	2e c0       	rjmp	.+92     	; 0x956 <KPD_GetPressedKey+0xd6>
		{
			/*get row value*/
			DIO_u8GetPinValue(KPD_PORT_ROW,local_u8ROW_Arr[local_u8Index_row],&local_u8RowState);
 8fa:	e1 2e       	mov	r14, r17
 8fc:	f1 2c       	mov	r15, r1
 8fe:	e1 e1       	ldi	r30, 0x11	; 17
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	ec 0f       	add	r30, r28
 904:	fd 1f       	adc	r31, r29
 906:	ee 0d       	add	r30, r14
 908:	ff 1d       	adc	r31, r15
 90a:	00 81       	ld	r16, Z
 90c:	ae 01       	movw	r20, r28
 90e:	47 5e       	subi	r20, 0xE7	; 231
 910:	5f 4f       	sbci	r21, 0xFF	; 255
 912:	60 2f       	mov	r22, r16
 914:	83 e0       	ldi	r24, 0x03	; 3
 916:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_u8GetPinValue>
			if(local_u8RowState == DIO_PIN_LOW)
 91a:	89 8d       	ldd	r24, Y+25	; 0x19
 91c:	81 11       	cpse	r24, r1
 91e:	1a c0       	rjmp	.+52     	; 0x954 <KPD_GetPressedKey+0xd4>
 920:	07 c0       	rjmp	.+14     	; 0x930 <KPD_GetPressedKey+0xb0>
			{
				
				/*bus*/
				while(local_u8RowState == DIO_PIN_LOW){
					DIO_u8GetPinValue(KPD_PORT_ROW,local_u8ROW_Arr[local_u8Index_row],&local_u8RowState);
 922:	ae 01       	movw	r20, r28
 924:	47 5e       	subi	r20, 0xE7	; 231
 926:	5f 4f       	sbci	r21, 0xFF	; 255
 928:	60 2f       	mov	r22, r16
 92a:	83 e0       	ldi	r24, 0x03	; 3
 92c:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KPD_PORT_ROW,local_u8ROW_Arr[local_u8Index_row],&local_u8RowState);
			if(local_u8RowState == DIO_PIN_LOW)
			{
				
				/*bus*/
				while(local_u8RowState == DIO_PIN_LOW){
 930:	89 8d       	ldd	r24, Y+25	; 0x19
 932:	88 23       	and	r24, r24
 934:	b1 f3       	breq	.-20     	; 0x922 <KPD_GetPressedKey+0xa2>
					DIO_u8GetPinValue(KPD_PORT_ROW,local_u8ROW_Arr[local_u8Index_row],&local_u8RowState);
				}
				local_u8PressedKey=local_u8KPD_Arr[local_u8Index_row][local_u8Index_col];
 936:	ee 0c       	add	r14, r14
 938:	ff 1c       	adc	r15, r15
 93a:	ee 0c       	add	r14, r14
 93c:	ff 1c       	adc	r15, r15
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	8c 0f       	add	r24, r28
 944:	9d 1f       	adc	r25, r29
 946:	e8 0e       	add	r14, r24
 948:	f9 1e       	adc	r15, r25
 94a:	f7 01       	movw	r30, r14
 94c:	ec 0d       	add	r30, r12
 94e:	fd 1d       	adc	r31, r13
 950:	80 81       	ld	r24, Z
				return local_u8PressedKey;
 952:	0e c0       	rjmp	.+28     	; 0x970 <KPD_GetPressedKey+0xf0>
		
		/*Activate column by low*/
		DIO_u8SetPinValue(KPD_PORT_COL,local_u8COL_Arr[local_u8Index_col],DIO_PIN_LOW);
		
		/*check R0--->R4 IF pressed retrun pressedKey*/
		for(local_u8Index_row = 0 ; local_u8Index_row < KPD_ROW_NUMBER ; local_u8Index_row++ )
 954:	1f 5f       	subi	r17, 0xFF	; 255
 956:	14 30       	cpi	r17, 0x04	; 4
 958:	80 f2       	brcs	.-96     	; 0x8fa <KPD_GetPressedKey+0x7a>
			}
			
		}
		
		/*Deactivate current column*/
		DIO_u8SetPinValue(KPD_PORT_COL,local_u8COL_Arr[local_u8Index_col],DIO_PIN_HIGH);
 95a:	41 e0       	ldi	r20, 0x01	; 1
 95c:	6a 2d       	mov	r22, r10
 95e:	83 e0       	ldi	r24, 0x03	; 3
 960:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
	/*
	LOOP


	*/
	for(local_u8Index_col = 0 ; local_u8Index_col < KPD_COL_NUMBER ; local_u8Index_col++ )
 964:	b3 94       	inc	r11
 966:	93 e0       	ldi	r25, 0x03	; 3
 968:	9b 15       	cp	r25, r11
 96a:	08 f0       	brcs	.+2      	; 0x96e <KPD_GetPressedKey+0xee>
 96c:	b6 cf       	rjmp	.-148    	; 0x8da <KPD_GetPressedKey+0x5a>
		/*Deactivate current column*/
		DIO_u8SetPinValue(KPD_PORT_COL,local_u8COL_Arr[local_u8Index_col],DIO_PIN_HIGH);
		
	}

	return local_u8PressedKey;
 96e:	8f ef       	ldi	r24, 0xFF	; 255

 970:	69 96       	adiw	r28, 0x19	; 25
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	f8 94       	cli
 976:	de bf       	out	0x3e, r29	; 62
 978:	0f be       	out	0x3f, r0	; 63
 97a:	cd bf       	out	0x3d, r28	; 61
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
 980:	1f 91       	pop	r17
 982:	0f 91       	pop	r16
 984:	ff 90       	pop	r15
 986:	ef 90       	pop	r14
 988:	df 90       	pop	r13
 98a:	cf 90       	pop	r12
 98c:	bf 90       	pop	r11
 98e:	af 90       	pop	r10
 990:	08 95       	ret

00000992 <send4Bits>:
	{
		LCD_voidSendData(ptru8Special[Local_Index]);
	}
	LCD_u8SetPosXY(PosX,PosY);
	LCD_voidSendData(block);
}
 992:	cf 93       	push	r28
 994:	c8 2f       	mov	r28, r24
 996:	48 2f       	mov	r20, r24
 998:	41 70       	andi	r20, 0x01	; 1
 99a:	60 e0       	ldi	r22, 0x00	; 0
 99c:	82 e0       	ldi	r24, 0x02	; 2
 99e:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 9a2:	c1 fb       	bst	r28, 1
 9a4:	44 27       	eor	r20, r20
 9a6:	40 f9       	bld	r20, 0
 9a8:	61 e0       	ldi	r22, 0x01	; 1
 9aa:	82 e0       	ldi	r24, 0x02	; 2
 9ac:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 9b0:	c2 fb       	bst	r28, 2
 9b2:	44 27       	eor	r20, r20
 9b4:	40 f9       	bld	r20, 0
 9b6:	62 e0       	ldi	r22, 0x02	; 2
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 9be:	c3 fb       	bst	r28, 3
 9c0:	44 27       	eor	r20, r20
 9c2:	40 f9       	bld	r20, 0
 9c4:	63 e0       	ldi	r22, 0x03	; 3
 9c6:	82 e0       	ldi	r24, 0x02	; 2
 9c8:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 9cc:	cf 91       	pop	r28
 9ce:	08 95       	ret

000009d0 <sendEnablePulse>:
 9d0:	41 e0       	ldi	r20, 0x01	; 1
 9d2:	67 e0       	ldi	r22, 0x07	; 7
 9d4:	82 e0       	ldi	r24, 0x02	; 2
 9d6:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 9da:	8f e3       	ldi	r24, 0x3F	; 63
 9dc:	9f e1       	ldi	r25, 0x1F	; 31
 9de:	01 97       	sbiw	r24, 0x01	; 1
 9e0:	f1 f7       	brne	.-4      	; 0x9de <sendEnablePulse+0xe>
 9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <sendEnablePulse+0x14>
 9e4:	00 00       	nop
 9e6:	40 e0       	ldi	r20, 0x00	; 0
 9e8:	67 e0       	ldi	r22, 0x07	; 7
 9ea:	82 e0       	ldi	r24, 0x02	; 2
 9ec:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 9f0:	08 95       	ret

000009f2 <LCD_voidSendCommand>:
 9f2:	cf 93       	push	r28
 9f4:	c8 2f       	mov	r28, r24
 9f6:	40 e0       	ldi	r20, 0x00	; 0
 9f8:	65 e0       	ldi	r22, 0x05	; 5
 9fa:	82 e0       	ldi	r24, 0x02	; 2
 9fc:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 a00:	40 e0       	ldi	r20, 0x00	; 0
 a02:	66 e0       	ldi	r22, 0x06	; 6
 a04:	82 e0       	ldi	r24, 0x02	; 2
 a06:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 a0a:	8c 2f       	mov	r24, r28
 a0c:	82 95       	swap	r24
 a0e:	8f 70       	andi	r24, 0x0F	; 15
 a10:	0e 94 c9 04 	call	0x992	; 0x992 <send4Bits>
 a14:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sendEnablePulse>
 a18:	8c 2f       	mov	r24, r28
 a1a:	0e 94 c9 04 	call	0x992	; 0x992 <send4Bits>
 a1e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sendEnablePulse>
 a22:	cf 91       	pop	r28
 a24:	08 95       	ret

00000a26 <LCD_voidINIT>:
 a26:	41 e0       	ldi	r20, 0x01	; 1
 a28:	65 e0       	ldi	r22, 0x05	; 5
 a2a:	82 e0       	ldi	r24, 0x02	; 2
 a2c:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
 a30:	41 e0       	ldi	r20, 0x01	; 1
 a32:	66 e0       	ldi	r22, 0x06	; 6
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
 a3a:	41 e0       	ldi	r20, 0x01	; 1
 a3c:	67 e0       	ldi	r22, 0x07	; 7
 a3e:	82 e0       	ldi	r24, 0x02	; 2
 a40:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
 a44:	41 e0       	ldi	r20, 0x01	; 1
 a46:	60 e0       	ldi	r22, 0x00	; 0
 a48:	82 e0       	ldi	r24, 0x02	; 2
 a4a:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
 a4e:	41 e0       	ldi	r20, 0x01	; 1
 a50:	61 e0       	ldi	r22, 0x01	; 1
 a52:	82 e0       	ldi	r24, 0x02	; 2
 a54:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
 a58:	41 e0       	ldi	r20, 0x01	; 1
 a5a:	62 e0       	ldi	r22, 0x02	; 2
 a5c:	82 e0       	ldi	r24, 0x02	; 2
 a5e:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
 a62:	41 e0       	ldi	r20, 0x01	; 1
 a64:	63 e0       	ldi	r22, 0x03	; 3
 a66:	82 e0       	ldi	r24, 0x02	; 2
 a68:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_u8SetPinDirection>
 a6c:	2f ef       	ldi	r18, 0xFF	; 255
 a6e:	83 ef       	ldi	r24, 0xF3	; 243
 a70:	91 e0       	ldi	r25, 0x01	; 1
 a72:	21 50       	subi	r18, 0x01	; 1
 a74:	80 40       	sbci	r24, 0x00	; 0
 a76:	90 40       	sbci	r25, 0x00	; 0
 a78:	e1 f7       	brne	.-8      	; 0xa72 <LCD_voidINIT+0x4c>
 a7a:	00 c0       	rjmp	.+0      	; 0xa7c <LCD_voidINIT+0x56>
 a7c:	00 00       	nop
 a7e:	82 e0       	ldi	r24, 0x02	; 2
 a80:	0e 94 c9 04 	call	0x992	; 0x992 <send4Bits>
 a84:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sendEnablePulse>
 a88:	82 e0       	ldi	r24, 0x02	; 2
 a8a:	0e 94 c9 04 	call	0x992	; 0x992 <send4Bits>
 a8e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sendEnablePulse>
 a92:	8c e0       	ldi	r24, 0x0C	; 12
 a94:	0e 94 c9 04 	call	0x992	; 0x992 <send4Bits>
 a98:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sendEnablePulse>
 a9c:	8c e0       	ldi	r24, 0x0C	; 12
 a9e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
 aa8:	08 95       	ret

00000aaa <LCD_voidSendData>:
 aaa:	cf 93       	push	r28
 aac:	c8 2f       	mov	r28, r24
 aae:	41 e0       	ldi	r20, 0x01	; 1
 ab0:	65 e0       	ldi	r22, 0x05	; 5
 ab2:	82 e0       	ldi	r24, 0x02	; 2
 ab4:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 ab8:	40 e0       	ldi	r20, 0x00	; 0
 aba:	66 e0       	ldi	r22, 0x06	; 6
 abc:	82 e0       	ldi	r24, 0x02	; 2
 abe:	0e 94 2e 03 	call	0x65c	; 0x65c <DIO_u8SetPinValue>
 ac2:	8c 2f       	mov	r24, r28
 ac4:	82 95       	swap	r24
 ac6:	8f 70       	andi	r24, 0x0F	; 15
 ac8:	0e 94 c9 04 	call	0x992	; 0x992 <send4Bits>
 acc:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sendEnablePulse>
 ad0:	8c 2f       	mov	r24, r28
 ad2:	0e 94 c9 04 	call	0x992	; 0x992 <send4Bits>
 ad6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sendEnablePulse>
 ada:	cf 91       	pop	r28
 adc:	08 95       	ret

00000ade <LCD_u8SendString>:
 ade:	0f 93       	push	r16
 ae0:	1f 93       	push	r17
 ae2:	cf 93       	push	r28
 ae4:	84 30       	cpi	r24, 0x04	; 4
 ae6:	91 05       	cpc	r25, r1
 ae8:	31 f4       	brne	.+12     	; 0xaf6 <LCD_u8SendString+0x18>
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	0c c0       	rjmp	.+24     	; 0xb06 <LCD_u8SendString+0x28>
 aee:	0e 94 55 05 	call	0xaaa	; 0xaaa <LCD_voidSendData>
 af2:	cf 5f       	subi	r28, 0xFF	; 255
 af4:	02 c0       	rjmp	.+4      	; 0xafa <LCD_u8SendString+0x1c>
 af6:	8c 01       	movw	r16, r24
 af8:	c0 e0       	ldi	r28, 0x00	; 0
 afa:	f8 01       	movw	r30, r16
 afc:	ec 0f       	add	r30, r28
 afe:	f1 1d       	adc	r31, r1
 b00:	80 81       	ld	r24, Z
 b02:	81 11       	cpse	r24, r1
 b04:	f4 cf       	rjmp	.-24     	; 0xaee <LCD_u8SendString+0x10>
 b06:	cf 91       	pop	r28
 b08:	1f 91       	pop	r17
 b0a:	0f 91       	pop	r16
 b0c:	08 95       	ret

00000b0e <LCD_u8SetPosXY>:
 b0e:	82 30       	cpi	r24, 0x02	; 2
 b10:	30 f4       	brcc	.+12     	; 0xb1e <LCD_u8SetPosXY+0x10>
 b12:	90 e4       	ldi	r25, 0x40	; 64
 b14:	89 9f       	mul	r24, r25
 b16:	60 0d       	add	r22, r0
 b18:	11 24       	eor	r1, r1
 b1a:	86 2f       	mov	r24, r22
 b1c:	01 c0       	rjmp	.+2      	; 0xb20 <LCD_u8SetPosXY+0x12>
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	80 58       	subi	r24, 0x80	; 128
 b22:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
 b26:	08 95       	ret

00000b28 <LCD_voidWriteNumber>:


void LCD_voidWriteNumber(u32 number)
{
 b28:	cf 92       	push	r12
 b2a:	df 92       	push	r13
 b2c:	ef 92       	push	r14
 b2e:	ff 92       	push	r15
 b30:	0f 93       	push	r16
 b32:	1f 93       	push	r17
 b34:	8b 01       	movw	r16, r22
 b36:	9c 01       	movw	r18, r24
	u32 local_reversed=1;

	if(number==0)
 b38:	67 2b       	or	r22, r23
 b3a:	68 2b       	or	r22, r24
 b3c:	69 2b       	or	r22, r25
 b3e:	49 f5       	brne	.+82     	; 0xb92 <LCD_voidWriteNumber+0x6a>
	{
		LCD_voidSendData('0');
 b40:	80 e3       	ldi	r24, 0x30	; 48
 b42:	0e 94 55 05 	call	0xaaa	; 0xaaa <LCD_voidSendData>
 b46:	45 c0       	rjmp	.+138    	; 0xbd2 <LCD_voidWriteNumber+0xaa>
	else
	{
		//Reverse Number
		while (number != 0)
		{
			local_reversed=local_reversed*10 + (number%10);
 b48:	dc 01       	movw	r26, r24
 b4a:	cb 01       	movw	r24, r22
 b4c:	88 0f       	add	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	aa 1f       	adc	r26, r26
 b52:	bb 1f       	adc	r27, r27
 b54:	6c 01       	movw	r12, r24
 b56:	7d 01       	movw	r14, r26
 b58:	cc 0c       	add	r12, r12
 b5a:	dd 1c       	adc	r13, r13
 b5c:	ee 1c       	adc	r14, r14
 b5e:	ff 1c       	adc	r15, r15
 b60:	cc 0c       	add	r12, r12
 b62:	dd 1c       	adc	r13, r13
 b64:	ee 1c       	adc	r14, r14
 b66:	ff 1c       	adc	r15, r15
 b68:	c8 0e       	add	r12, r24
 b6a:	d9 1e       	adc	r13, r25
 b6c:	ea 1e       	adc	r14, r26
 b6e:	fb 1e       	adc	r15, r27
 b70:	c9 01       	movw	r24, r18
 b72:	b8 01       	movw	r22, r16
 b74:	2a e0       	ldi	r18, 0x0A	; 10
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	40 e0       	ldi	r20, 0x00	; 0
 b7a:	50 e0       	ldi	r21, 0x00	; 0
 b7c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__udivmodsi4>
 b80:	6c 0d       	add	r22, r12
 b82:	7d 1d       	adc	r23, r13
 b84:	8e 1d       	adc	r24, r14
 b86:	9f 1d       	adc	r25, r15
			number/=10;
 b88:	02 2f       	mov	r16, r18
 b8a:	13 2f       	mov	r17, r19
 b8c:	24 2f       	mov	r18, r20
 b8e:	35 2f       	mov	r19, r21
 b90:	04 c0       	rjmp	.+8      	; 0xb9a <LCD_voidWriteNumber+0x72>
 b92:	61 e0       	ldi	r22, 0x01	; 1
 b94:	70 e0       	ldi	r23, 0x00	; 0
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	90 e0       	ldi	r25, 0x00	; 0
		LCD_voidSendData('0');
	}
	else
	{
		//Reverse Number
		while (number != 0)
 b9a:	01 15       	cp	r16, r1
 b9c:	11 05       	cpc	r17, r1
 b9e:	21 05       	cpc	r18, r1
 ba0:	31 05       	cpc	r19, r1
 ba2:	91 f6       	brne	.-92     	; 0xb48 <LCD_voidWriteNumber+0x20>
			number/=10;
		}
		
		do
		{
			LCD_voidSendData((local_reversed % 10) + '0');
 ba4:	2a e0       	ldi	r18, 0x0A	; 10
 ba6:	30 e0       	ldi	r19, 0x00	; 0
 ba8:	40 e0       	ldi	r20, 0x00	; 0
 baa:	50 e0       	ldi	r21, 0x00	; 0
 bac:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__udivmodsi4>
 bb0:	e2 2e       	mov	r14, r18
 bb2:	f3 2e       	mov	r15, r19
 bb4:	04 2f       	mov	r16, r20
 bb6:	15 2f       	mov	r17, r21
 bb8:	80 e3       	ldi	r24, 0x30	; 48
 bba:	86 0f       	add	r24, r22
 bbc:	0e 94 55 05 	call	0xaaa	; 0xaaa <LCD_voidSendData>
			local_reversed/=10;
 bc0:	6e 2d       	mov	r22, r14
 bc2:	7f 2d       	mov	r23, r15
 bc4:	80 2f       	mov	r24, r16
 bc6:	91 2f       	mov	r25, r17
		}
		while(local_reversed != 1);
 bc8:	61 30       	cpi	r22, 0x01	; 1
 bca:	71 05       	cpc	r23, r1
 bcc:	81 05       	cpc	r24, r1
 bce:	91 05       	cpc	r25, r1
 bd0:	49 f7       	brne	.-46     	; 0xba4 <LCD_voidWriteNumber+0x7c>
	}
 bd2:	1f 91       	pop	r17
 bd4:	0f 91       	pop	r16
 bd6:	ff 90       	pop	r15
 bd8:	ef 90       	pop	r14
 bda:	df 90       	pop	r13
 bdc:	cf 90       	pop	r12
 bde:	08 95       	ret

00000be0 <main>:
#include "KPD_interface.h"
#define MAX_LENGTH 100


int main(void)
{
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	cd b7       	in	r28, 0x3d	; 61
 be6:	de b7       	in	r29, 0x3e	; 62
 be8:	c4 56       	subi	r28, 0x64	; 100
 bea:	d1 09       	sbc	r29, r1
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	f8 94       	cli
 bf0:	de bf       	out	0x3e, r29	; 62
 bf2:	0f be       	out	0x3f, r0	; 63
 bf4:	cd bf       	out	0x3d, r28	; 61
	LCD_voidINIT();
 bf6:	0e 94 13 05 	call	0xa26	; 0xa26 <LCD_voidINIT>
	KPD_voidINIT();
 bfa:	0e 94 ef 03 	call	0x7de	; 0x7de <KPD_voidINIT>
	
	 char expression[MAX_LENGTH];
	 char postfix[MAX_LENGTH];
	 u8 index = 0;
	
	LCD_u8SendString("Welcome");
 bfe:	81 e8       	ldi	r24, 0x81	; 129
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 6f 05 	call	0xade	; 0xade <LCD_u8SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c06:	2f ef       	ldi	r18, 0xFF	; 255
 c08:	83 ed       	ldi	r24, 0xD3	; 211
 c0a:	90 e3       	ldi	r25, 0x30	; 48
 c0c:	21 50       	subi	r18, 0x01	; 1
 c0e:	80 40       	sbci	r24, 0x00	; 0
 c10:	90 40       	sbci	r25, 0x00	; 0
 c12:	e1 f7       	brne	.-8      	; 0xc0c <main+0x2c>
 c14:	00 c0       	rjmp	.+0      	; 0xc16 <main+0x36>
 c16:	00 00       	nop
	_delay_ms(1000);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
 c18:	81 e0       	ldi	r24, 0x01	; 1
 c1a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
	LCD_voidINIT();
	KPD_voidINIT();
	
	 char expression[MAX_LENGTH];
	 char postfix[MAX_LENGTH];
	 u8 index = 0;
 c1e:	00 e0       	ldi	r16, 0x00	; 0
		
		
		u8 pressedkey = KPD_NOT_PRESSED_KEY;
		do 
		{
			pressedkey = KPD_GetPressedKey();
 c20:	0e 94 40 04 	call	0x880	; 0x880 <KPD_GetPressedKey>
 c24:	18 2f       	mov	r17, r24
		} while (pressedkey == KPD_NOT_PRESSED_KEY);
 c26:	8f 3f       	cpi	r24, 0xFF	; 255
 c28:	d9 f3       	breq	.-10     	; 0xc20 <main+0x40>
		
		switch(pressedkey)
 c2a:	8d 33       	cpi	r24, 0x3D	; 61
 c2c:	49 f0       	breq	.+18     	; 0xc40 <main+0x60>
 c2e:	83 34       	cpi	r24, 0x43	; 67
 c30:	99 f4       	brne	.+38     	; 0xc58 <main+0x78>
		{
			case 'C':
			if (expression[0] == '\0')
 c32:	89 81       	ldd	r24, Y+1	; 0x01
 c34:	81 11       	cpse	r24, r1
 c36:	21 c0       	rjmp	.+66     	; 0xc7a <main+0x9a>
			LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
 c38:	81 e0       	ldi	r24, 0x01	; 1
 c3a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
 c3e:	1d c0       	rjmp	.+58     	; 0xc7a <main+0x9a>
			break;
			
			case '=':
			if (expression[0] == '\0')
 c40:	89 81       	ldd	r24, Y+1	; 0x01
 c42:	88 23       	and	r24, r24
 c44:	d1 f0       	breq	.+52     	; 0xc7a <main+0x9a>
			break;
			LCD_voidSendData('=');
 c46:	8d e3       	ldi	r24, 0x3D	; 61
 c48:	0e 94 55 05 	call	0xaaa	; 0xaaa <LCD_voidSendData>
			evaluate(expression);
 c4c:	ce 01       	movw	r24, r28
 c4e:	01 96       	adiw	r24, 0x01	; 1
 c50:	0e 94 f5 01 	call	0x3ea	; 0x3ea <evaluate>
			index=0;
 c54:	00 e0       	ldi	r16, 0x00	; 0
			break;
 c56:	11 c0       	rjmp	.+34     	; 0xc7a <main+0x9a>
			
			default:
			if (expression[0]== '\0')
 c58:	89 81       	ldd	r24, Y+1	; 0x01
 c5a:	81 11       	cpse	r24, r1
 c5c:	03 c0       	rjmp	.+6      	; 0xc64 <main+0x84>
			LCD_voidSendData(LCD_CLEAR_DISPLAY);
 c5e:	81 e0       	ldi	r24, 0x01	; 1
 c60:	0e 94 55 05 	call	0xaaa	; 0xaaa <LCD_voidSendData>
			
			expression[index] = pressedkey;
 c64:	e1 e0       	ldi	r30, 0x01	; 1
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	ec 0f       	add	r30, r28
 c6a:	fd 1f       	adc	r31, r29
 c6c:	e0 0f       	add	r30, r16
 c6e:	f1 1d       	adc	r31, r1
 c70:	10 83       	st	Z, r17
			LCD_voidSendData(pressedkey);
 c72:	81 2f       	mov	r24, r17
 c74:	0e 94 55 05 	call	0xaaa	; 0xaaa <LCD_voidSendData>
			index++;
 c78:	0f 5f       	subi	r16, 0xFF	; 255
			break;
			
			
		}
		expression[index] = '\0';
 c7a:	e1 e0       	ldi	r30, 0x01	; 1
 c7c:	f0 e0       	ldi	r31, 0x00	; 0
 c7e:	ec 0f       	add	r30, r28
 c80:	fd 1f       	adc	r31, r29
 c82:	e0 0f       	add	r30, r16
 c84:	f1 1d       	adc	r31, r1
 c86:	10 82       	st	Z, r1

 	}
 c88:	cb cf       	rjmp	.-106    	; 0xc20 <main+0x40>

00000c8a <__divmodhi4>:
 c8a:	97 fb       	bst	r25, 7
 c8c:	07 2e       	mov	r0, r23
 c8e:	16 f4       	brtc	.+4      	; 0xc94 <__divmodhi4+0xa>
 c90:	00 94       	com	r0
 c92:	07 d0       	rcall	.+14     	; 0xca2 <__divmodhi4_neg1>
 c94:	77 fd       	sbrc	r23, 7
 c96:	09 d0       	rcall	.+18     	; 0xcaa <__divmodhi4_neg2>
 c98:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__udivmodhi4>
 c9c:	07 fc       	sbrc	r0, 7
 c9e:	05 d0       	rcall	.+10     	; 0xcaa <__divmodhi4_neg2>
 ca0:	3e f4       	brtc	.+14     	; 0xcb0 <__divmodhi4_exit>

00000ca2 <__divmodhi4_neg1>:
 ca2:	90 95       	com	r25
 ca4:	81 95       	neg	r24
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	08 95       	ret

00000caa <__divmodhi4_neg2>:
 caa:	70 95       	com	r23
 cac:	61 95       	neg	r22
 cae:	7f 4f       	sbci	r23, 0xFF	; 255

00000cb0 <__divmodhi4_exit>:
 cb0:	08 95       	ret

00000cb2 <__udivmodsi4>:
 cb2:	a1 e2       	ldi	r26, 0x21	; 33
 cb4:	1a 2e       	mov	r1, r26
 cb6:	aa 1b       	sub	r26, r26
 cb8:	bb 1b       	sub	r27, r27
 cba:	fd 01       	movw	r30, r26
 cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <__udivmodsi4_ep>

00000cbe <__udivmodsi4_loop>:
 cbe:	aa 1f       	adc	r26, r26
 cc0:	bb 1f       	adc	r27, r27
 cc2:	ee 1f       	adc	r30, r30
 cc4:	ff 1f       	adc	r31, r31
 cc6:	a2 17       	cp	r26, r18
 cc8:	b3 07       	cpc	r27, r19
 cca:	e4 07       	cpc	r30, r20
 ccc:	f5 07       	cpc	r31, r21
 cce:	20 f0       	brcs	.+8      	; 0xcd8 <__udivmodsi4_ep>
 cd0:	a2 1b       	sub	r26, r18
 cd2:	b3 0b       	sbc	r27, r19
 cd4:	e4 0b       	sbc	r30, r20
 cd6:	f5 0b       	sbc	r31, r21

00000cd8 <__udivmodsi4_ep>:
 cd8:	66 1f       	adc	r22, r22
 cda:	77 1f       	adc	r23, r23
 cdc:	88 1f       	adc	r24, r24
 cde:	99 1f       	adc	r25, r25
 ce0:	1a 94       	dec	r1
 ce2:	69 f7       	brne	.-38     	; 0xcbe <__udivmodsi4_loop>
 ce4:	60 95       	com	r22
 ce6:	70 95       	com	r23
 ce8:	80 95       	com	r24
 cea:	90 95       	com	r25
 cec:	9b 01       	movw	r18, r22
 cee:	ac 01       	movw	r20, r24
 cf0:	bd 01       	movw	r22, r26
 cf2:	cf 01       	movw	r24, r30
 cf4:	08 95       	ret

00000cf6 <__udivmodhi4>:
 cf6:	aa 1b       	sub	r26, r26
 cf8:	bb 1b       	sub	r27, r27
 cfa:	51 e1       	ldi	r21, 0x11	; 17
 cfc:	07 c0       	rjmp	.+14     	; 0xd0c <__udivmodhi4_ep>

00000cfe <__udivmodhi4_loop>:
 cfe:	aa 1f       	adc	r26, r26
 d00:	bb 1f       	adc	r27, r27
 d02:	a6 17       	cp	r26, r22
 d04:	b7 07       	cpc	r27, r23
 d06:	10 f0       	brcs	.+4      	; 0xd0c <__udivmodhi4_ep>
 d08:	a6 1b       	sub	r26, r22
 d0a:	b7 0b       	sbc	r27, r23

00000d0c <__udivmodhi4_ep>:
 d0c:	88 1f       	adc	r24, r24
 d0e:	99 1f       	adc	r25, r25
 d10:	5a 95       	dec	r21
 d12:	a9 f7       	brne	.-22     	; 0xcfe <__udivmodhi4_loop>
 d14:	80 95       	com	r24
 d16:	90 95       	com	r25
 d18:	bc 01       	movw	r22, r24
 d1a:	cd 01       	movw	r24, r26
 d1c:	08 95       	ret

00000d1e <malloc>:
 d1e:	0f 93       	push	r16
 d20:	1f 93       	push	r17
 d22:	cf 93       	push	r28
 d24:	df 93       	push	r29
 d26:	82 30       	cpi	r24, 0x02	; 2
 d28:	91 05       	cpc	r25, r1
 d2a:	10 f4       	brcc	.+4      	; 0xd30 <malloc+0x12>
 d2c:	82 e0       	ldi	r24, 0x02	; 2
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <__flp>
 d34:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <__flp+0x1>
 d38:	20 e0       	ldi	r18, 0x00	; 0
 d3a:	30 e0       	ldi	r19, 0x00	; 0
 d3c:	a0 e0       	ldi	r26, 0x00	; 0
 d3e:	b0 e0       	ldi	r27, 0x00	; 0
 d40:	30 97       	sbiw	r30, 0x00	; 0
 d42:	19 f1       	breq	.+70     	; 0xd8a <malloc+0x6c>
 d44:	40 81       	ld	r20, Z
 d46:	51 81       	ldd	r21, Z+1	; 0x01
 d48:	02 81       	ldd	r16, Z+2	; 0x02
 d4a:	13 81       	ldd	r17, Z+3	; 0x03
 d4c:	48 17       	cp	r20, r24
 d4e:	59 07       	cpc	r21, r25
 d50:	c8 f0       	brcs	.+50     	; 0xd84 <malloc+0x66>
 d52:	84 17       	cp	r24, r20
 d54:	95 07       	cpc	r25, r21
 d56:	69 f4       	brne	.+26     	; 0xd72 <malloc+0x54>
 d58:	10 97       	sbiw	r26, 0x00	; 0
 d5a:	31 f0       	breq	.+12     	; 0xd68 <malloc+0x4a>
 d5c:	12 96       	adiw	r26, 0x02	; 2
 d5e:	0c 93       	st	X, r16
 d60:	12 97       	sbiw	r26, 0x02	; 2
 d62:	13 96       	adiw	r26, 0x03	; 3
 d64:	1c 93       	st	X, r17
 d66:	27 c0       	rjmp	.+78     	; 0xdb6 <malloc+0x98>
 d68:	00 93 1c 02 	sts	0x021C, r16	; 0x80021c <__flp>
 d6c:	10 93 1d 02 	sts	0x021D, r17	; 0x80021d <__flp+0x1>
 d70:	22 c0       	rjmp	.+68     	; 0xdb6 <malloc+0x98>
 d72:	21 15       	cp	r18, r1
 d74:	31 05       	cpc	r19, r1
 d76:	19 f0       	breq	.+6      	; 0xd7e <malloc+0x60>
 d78:	42 17       	cp	r20, r18
 d7a:	53 07       	cpc	r21, r19
 d7c:	18 f4       	brcc	.+6      	; 0xd84 <malloc+0x66>
 d7e:	9a 01       	movw	r18, r20
 d80:	bd 01       	movw	r22, r26
 d82:	ef 01       	movw	r28, r30
 d84:	df 01       	movw	r26, r30
 d86:	f8 01       	movw	r30, r16
 d88:	db cf       	rjmp	.-74     	; 0xd40 <malloc+0x22>
 d8a:	21 15       	cp	r18, r1
 d8c:	31 05       	cpc	r19, r1
 d8e:	f9 f0       	breq	.+62     	; 0xdce <malloc+0xb0>
 d90:	28 1b       	sub	r18, r24
 d92:	39 0b       	sbc	r19, r25
 d94:	24 30       	cpi	r18, 0x04	; 4
 d96:	31 05       	cpc	r19, r1
 d98:	80 f4       	brcc	.+32     	; 0xdba <malloc+0x9c>
 d9a:	8a 81       	ldd	r24, Y+2	; 0x02
 d9c:	9b 81       	ldd	r25, Y+3	; 0x03
 d9e:	61 15       	cp	r22, r1
 da0:	71 05       	cpc	r23, r1
 da2:	21 f0       	breq	.+8      	; 0xdac <malloc+0x8e>
 da4:	fb 01       	movw	r30, r22
 da6:	93 83       	std	Z+3, r25	; 0x03
 da8:	82 83       	std	Z+2, r24	; 0x02
 daa:	04 c0       	rjmp	.+8      	; 0xdb4 <malloc+0x96>
 dac:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <__flp+0x1>
 db0:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__flp>
 db4:	fe 01       	movw	r30, r28
 db6:	32 96       	adiw	r30, 0x02	; 2
 db8:	44 c0       	rjmp	.+136    	; 0xe42 <malloc+0x124>
 dba:	fe 01       	movw	r30, r28
 dbc:	e2 0f       	add	r30, r18
 dbe:	f3 1f       	adc	r31, r19
 dc0:	81 93       	st	Z+, r24
 dc2:	91 93       	st	Z+, r25
 dc4:	22 50       	subi	r18, 0x02	; 2
 dc6:	31 09       	sbc	r19, r1
 dc8:	39 83       	std	Y+1, r19	; 0x01
 dca:	28 83       	st	Y, r18
 dcc:	3a c0       	rjmp	.+116    	; 0xe42 <malloc+0x124>
 dce:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
 dd2:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
 dd6:	23 2b       	or	r18, r19
 dd8:	41 f4       	brne	.+16     	; 0xdea <malloc+0xcc>
 dda:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 dde:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 de2:	30 93 1b 02 	sts	0x021B, r19	; 0x80021b <__brkval+0x1>
 de6:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <__brkval>
 dea:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 dee:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 df2:	21 15       	cp	r18, r1
 df4:	31 05       	cpc	r19, r1
 df6:	41 f4       	brne	.+16     	; 0xe08 <malloc+0xea>
 df8:	2d b7       	in	r18, 0x3d	; 61
 dfa:	3e b7       	in	r19, 0x3e	; 62
 dfc:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 e00:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 e04:	24 1b       	sub	r18, r20
 e06:	35 0b       	sbc	r19, r21
 e08:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__brkval>
 e0c:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__brkval+0x1>
 e10:	e2 17       	cp	r30, r18
 e12:	f3 07       	cpc	r31, r19
 e14:	a0 f4       	brcc	.+40     	; 0xe3e <malloc+0x120>
 e16:	2e 1b       	sub	r18, r30
 e18:	3f 0b       	sbc	r19, r31
 e1a:	28 17       	cp	r18, r24
 e1c:	39 07       	cpc	r19, r25
 e1e:	78 f0       	brcs	.+30     	; 0xe3e <malloc+0x120>
 e20:	ac 01       	movw	r20, r24
 e22:	4e 5f       	subi	r20, 0xFE	; 254
 e24:	5f 4f       	sbci	r21, 0xFF	; 255
 e26:	24 17       	cp	r18, r20
 e28:	35 07       	cpc	r19, r21
 e2a:	48 f0       	brcs	.+18     	; 0xe3e <malloc+0x120>
 e2c:	4e 0f       	add	r20, r30
 e2e:	5f 1f       	adc	r21, r31
 e30:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <__brkval+0x1>
 e34:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <__brkval>
 e38:	81 93       	st	Z+, r24
 e3a:	91 93       	st	Z+, r25
 e3c:	02 c0       	rjmp	.+4      	; 0xe42 <malloc+0x124>
 e3e:	e0 e0       	ldi	r30, 0x00	; 0
 e40:	f0 e0       	ldi	r31, 0x00	; 0
 e42:	cf 01       	movw	r24, r30
 e44:	df 91       	pop	r29
 e46:	cf 91       	pop	r28
 e48:	1f 91       	pop	r17
 e4a:	0f 91       	pop	r16
 e4c:	08 95       	ret

00000e4e <free>:
 e4e:	cf 93       	push	r28
 e50:	df 93       	push	r29
 e52:	00 97       	sbiw	r24, 0x00	; 0
 e54:	09 f4       	brne	.+2      	; 0xe58 <free+0xa>
 e56:	81 c0       	rjmp	.+258    	; 0xf5a <free+0x10c>
 e58:	fc 01       	movw	r30, r24
 e5a:	32 97       	sbiw	r30, 0x02	; 2
 e5c:	13 82       	std	Z+3, r1	; 0x03
 e5e:	12 82       	std	Z+2, r1	; 0x02
 e60:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <__flp>
 e64:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <__flp+0x1>
 e68:	10 97       	sbiw	r26, 0x00	; 0
 e6a:	81 f4       	brne	.+32     	; 0xe8c <free+0x3e>
 e6c:	20 81       	ld	r18, Z
 e6e:	31 81       	ldd	r19, Z+1	; 0x01
 e70:	82 0f       	add	r24, r18
 e72:	93 1f       	adc	r25, r19
 e74:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
 e78:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
 e7c:	28 17       	cp	r18, r24
 e7e:	39 07       	cpc	r19, r25
 e80:	51 f5       	brne	.+84     	; 0xed6 <free+0x88>
 e82:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__brkval+0x1>
 e86:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__brkval>
 e8a:	67 c0       	rjmp	.+206    	; 0xf5a <free+0x10c>
 e8c:	ed 01       	movw	r28, r26
 e8e:	20 e0       	ldi	r18, 0x00	; 0
 e90:	30 e0       	ldi	r19, 0x00	; 0
 e92:	ce 17       	cp	r28, r30
 e94:	df 07       	cpc	r29, r31
 e96:	40 f4       	brcc	.+16     	; 0xea8 <free+0x5a>
 e98:	4a 81       	ldd	r20, Y+2	; 0x02
 e9a:	5b 81       	ldd	r21, Y+3	; 0x03
 e9c:	9e 01       	movw	r18, r28
 e9e:	41 15       	cp	r20, r1
 ea0:	51 05       	cpc	r21, r1
 ea2:	f1 f0       	breq	.+60     	; 0xee0 <free+0x92>
 ea4:	ea 01       	movw	r28, r20
 ea6:	f5 cf       	rjmp	.-22     	; 0xe92 <free+0x44>
 ea8:	d3 83       	std	Z+3, r29	; 0x03
 eaa:	c2 83       	std	Z+2, r28	; 0x02
 eac:	40 81       	ld	r20, Z
 eae:	51 81       	ldd	r21, Z+1	; 0x01
 eb0:	84 0f       	add	r24, r20
 eb2:	95 1f       	adc	r25, r21
 eb4:	c8 17       	cp	r28, r24
 eb6:	d9 07       	cpc	r29, r25
 eb8:	59 f4       	brne	.+22     	; 0xed0 <free+0x82>
 eba:	88 81       	ld	r24, Y
 ebc:	99 81       	ldd	r25, Y+1	; 0x01
 ebe:	84 0f       	add	r24, r20
 ec0:	95 1f       	adc	r25, r21
 ec2:	02 96       	adiw	r24, 0x02	; 2
 ec4:	91 83       	std	Z+1, r25	; 0x01
 ec6:	80 83       	st	Z, r24
 ec8:	8a 81       	ldd	r24, Y+2	; 0x02
 eca:	9b 81       	ldd	r25, Y+3	; 0x03
 ecc:	93 83       	std	Z+3, r25	; 0x03
 ece:	82 83       	std	Z+2, r24	; 0x02
 ed0:	21 15       	cp	r18, r1
 ed2:	31 05       	cpc	r19, r1
 ed4:	29 f4       	brne	.+10     	; 0xee0 <free+0x92>
 ed6:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <__flp+0x1>
 eda:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <__flp>
 ede:	3d c0       	rjmp	.+122    	; 0xf5a <free+0x10c>
 ee0:	e9 01       	movw	r28, r18
 ee2:	fb 83       	std	Y+3, r31	; 0x03
 ee4:	ea 83       	std	Y+2, r30	; 0x02
 ee6:	49 91       	ld	r20, Y+
 ee8:	59 91       	ld	r21, Y+
 eea:	c4 0f       	add	r28, r20
 eec:	d5 1f       	adc	r29, r21
 eee:	ec 17       	cp	r30, r28
 ef0:	fd 07       	cpc	r31, r29
 ef2:	61 f4       	brne	.+24     	; 0xf0c <free+0xbe>
 ef4:	80 81       	ld	r24, Z
 ef6:	91 81       	ldd	r25, Z+1	; 0x01
 ef8:	84 0f       	add	r24, r20
 efa:	95 1f       	adc	r25, r21
 efc:	02 96       	adiw	r24, 0x02	; 2
 efe:	e9 01       	movw	r28, r18
 f00:	99 83       	std	Y+1, r25	; 0x01
 f02:	88 83       	st	Y, r24
 f04:	82 81       	ldd	r24, Z+2	; 0x02
 f06:	93 81       	ldd	r25, Z+3	; 0x03
 f08:	9b 83       	std	Y+3, r25	; 0x03
 f0a:	8a 83       	std	Y+2, r24	; 0x02
 f0c:	e0 e0       	ldi	r30, 0x00	; 0
 f0e:	f0 e0       	ldi	r31, 0x00	; 0
 f10:	12 96       	adiw	r26, 0x02	; 2
 f12:	8d 91       	ld	r24, X+
 f14:	9c 91       	ld	r25, X
 f16:	13 97       	sbiw	r26, 0x03	; 3
 f18:	00 97       	sbiw	r24, 0x00	; 0
 f1a:	19 f0       	breq	.+6      	; 0xf22 <free+0xd4>
 f1c:	fd 01       	movw	r30, r26
 f1e:	dc 01       	movw	r26, r24
 f20:	f7 cf       	rjmp	.-18     	; 0xf10 <free+0xc2>
 f22:	8d 91       	ld	r24, X+
 f24:	9c 91       	ld	r25, X
 f26:	11 97       	sbiw	r26, 0x01	; 1
 f28:	9d 01       	movw	r18, r26
 f2a:	2e 5f       	subi	r18, 0xFE	; 254
 f2c:	3f 4f       	sbci	r19, 0xFF	; 255
 f2e:	82 0f       	add	r24, r18
 f30:	93 1f       	adc	r25, r19
 f32:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
 f36:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
 f3a:	28 17       	cp	r18, r24
 f3c:	39 07       	cpc	r19, r25
 f3e:	69 f4       	brne	.+26     	; 0xf5a <free+0x10c>
 f40:	30 97       	sbiw	r30, 0x00	; 0
 f42:	29 f4       	brne	.+10     	; 0xf4e <free+0x100>
 f44:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__flp+0x1>
 f48:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__flp>
 f4c:	02 c0       	rjmp	.+4      	; 0xf52 <free+0x104>
 f4e:	13 82       	std	Z+3, r1	; 0x03
 f50:	12 82       	std	Z+2, r1	; 0x02
 f52:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <__brkval+0x1>
 f56:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <__brkval>
 f5a:	df 91       	pop	r29
 f5c:	cf 91       	pop	r28
 f5e:	08 95       	ret

00000f60 <atoi>:
 f60:	fc 01       	movw	r30, r24
 f62:	88 27       	eor	r24, r24
 f64:	99 27       	eor	r25, r25
 f66:	e8 94       	clt
 f68:	21 91       	ld	r18, Z+
 f6a:	20 32       	cpi	r18, 0x20	; 32
 f6c:	e9 f3       	breq	.-6      	; 0xf68 <atoi+0x8>
 f6e:	29 30       	cpi	r18, 0x09	; 9
 f70:	10 f0       	brcs	.+4      	; 0xf76 <atoi+0x16>
 f72:	2e 30       	cpi	r18, 0x0E	; 14
 f74:	c8 f3       	brcs	.-14     	; 0xf68 <atoi+0x8>
 f76:	2b 32       	cpi	r18, 0x2B	; 43
 f78:	41 f0       	breq	.+16     	; 0xf8a <atoi+0x2a>
 f7a:	2d 32       	cpi	r18, 0x2D	; 45
 f7c:	39 f4       	brne	.+14     	; 0xf8c <atoi+0x2c>
 f7e:	68 94       	set
 f80:	04 c0       	rjmp	.+8      	; 0xf8a <atoi+0x2a>
 f82:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__mulhi_const_10>
 f86:	82 0f       	add	r24, r18
 f88:	91 1d       	adc	r25, r1
 f8a:	21 91       	ld	r18, Z+
 f8c:	20 53       	subi	r18, 0x30	; 48
 f8e:	2a 30       	cpi	r18, 0x0A	; 10
 f90:	c0 f3       	brcs	.-16     	; 0xf82 <atoi+0x22>
 f92:	1e f4       	brtc	.+6      	; 0xf9a <atoi+0x3a>
 f94:	90 95       	com	r25
 f96:	81 95       	neg	r24
 f98:	9f 4f       	sbci	r25, 0xFF	; 255
 f9a:	08 95       	ret

00000f9c <__mulhi_const_10>:
 f9c:	7a e0       	ldi	r23, 0x0A	; 10
 f9e:	97 9f       	mul	r25, r23
 fa0:	90 2d       	mov	r25, r0
 fa2:	87 9f       	mul	r24, r23
 fa4:	80 2d       	mov	r24, r0
 fa6:	91 0d       	add	r25, r1
 fa8:	11 24       	eor	r1, r1
 faa:	08 95       	ret

00000fac <_exit>:
 fac:	f8 94       	cli

00000fae <__stop_program>:
 fae:	ff cf       	rjmp	.-2      	; 0xfae <__stop_program>
